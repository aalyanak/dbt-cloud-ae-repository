{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.1", "generated_at": "2023-09-10T15:36:42.909027Z", "invocation_id": "9324f664-6d51-4d10-9fc8-414ce20407ed", "env": {}, "project_name": "ae_project", "project_id": "8d4eb577a5fe028866cea98ff9f22244", "user_id": "de98ce7f-1239-4255-82e6-b5b58a951407", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.ae_project.tier3_consumption__user": {"database": "analytics-engineering-398318", "schema": "ae_tier3_consumption", "name": "tier3_consumption__user", "resource_type": "model", "package_name": "ae_project", "path": "tier3_consumption/tier3_consumption__user.sql", "original_file_path": "models/tier3_consumption/tier3_consumption__user.sql", "unique_id": "model.ae_project.tier3_consumption__user", "fqn": ["ae_project", "tier3_consumption", "tier3_consumption__user"], "alias": "user", "checksum": {"name": "sha256", "checksum": "0a60a058e62375404d304313b806a014e857a9d103c217e2700f26aa8185855e"}, "config": {"enabled": true, "alias": "user", "schema": "tier3_consumption", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A User is a name given to an individual who interacts with the website, either converted (signed up) or as a guest. For now, we only have converted users, but the model is extendable to the guest users in the future.", "columns": {"user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_indicator": {"name": "user_conversion_indicator", "description": "A User Conversion Indicator indicates whether or not a User is converted (signed up).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier3_consumption/tier3_consumption.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier3_consumption", "alias": "user"}, "created_at": 1694360092.23143, "relation_name": "`analytics-engineering-398318`.`ae_tier3_consumption`.`user`", "raw_code": "{{ config(\r\n    schema='tier3_consumption', \r\n    alias='user',\r\n    materialized='table') }}\r\n\r\nWITH users as (\r\n   select * from {{ ref('tier2_curated__user') }}\r\n)\r\n\r\nselect \r\n  user_id,\r\n  user_conversion_indicator\r\n\r\nfrom users", "language": "sql", "refs": [{"name": "tier2_curated__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier2_curated__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier3_consumption__user_conversion": {"database": "analytics-engineering-398318", "schema": "ae_tier3_consumption", "name": "tier3_consumption__user_conversion", "resource_type": "model", "package_name": "ae_project", "path": "tier3_consumption/tier3_consumption__user_conversion.sql", "original_file_path": "models/tier3_consumption/tier3_consumption__user_conversion.sql", "unique_id": "model.ae_project.tier3_consumption__user_conversion", "fqn": ["ae_project", "tier3_consumption", "tier3_consumption__user_conversion"], "alias": "user_conversion", "checksum": {"name": "sha256", "checksum": "a0b9a13436103a403415b2362e3926444420e3a2f3f729e474e329f132cd6ce4"}, "config": {"enabled": true, "alias": "user_conversion", "schema": "tier3_consumption", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Conversion contains the users who are converted (signed up) to the website.", "columns": {"user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_indicator": {"name": "user_conversion_indicator", "description": "A User Conversion Indicator indicates whether or not a User is converted (signed up).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_channel_name": {"name": "user_conversion_channel_name", "description": "User Conversion Channel Name is the name of the channel which is the winner for the conversion.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_timestamp": {"name": "user_conversion_timestamp", "description": "User Conversion Timestamp is the time when the conversion is happened.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_via_session_indicator": {"name": "user_conversion_via_session_indicator", "description": "User Conversion via Session indicator indicates whether or not a User is conversion is initiated by a session (live or non-live).", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier3_consumption/tier3_consumption.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier3_consumption", "alias": "user_conversion"}, "created_at": 1694360092.2360244, "relation_name": "`analytics-engineering-398318`.`ae_tier3_consumption`.`user_conversion`", "raw_code": "{{ config(\r\n    schema='tier3_consumption', \r\n    alias='user_conversion',\r\n    materialized='table') }}\r\n\r\nWITH user_conversion AS (\r\n    select * from {{ ref('tier2_curated__user_conversion') }}\r\n)\r\nselect \r\n    user_id,\r\n    user_conversion_indicator,\r\n    user_conversion_channel_name,\r\n    user_conversion_timestamp,\r\n    user_conversion_via_session_indicator\r\nfrom user_conversion", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier2_curated__user": {"database": "analytics-engineering-398318", "schema": "ae_tier2_curated", "name": "tier2_curated__user", "resource_type": "model", "package_name": "ae_project", "path": "tier2_curated/tier2_curated__user.sql", "original_file_path": "models/tier2_curated/tier2_curated__user.sql", "unique_id": "model.ae_project.tier2_curated__user", "fqn": ["ae_project", "tier2_curated", "tier2_curated__user"], "alias": "user", "checksum": {"name": "sha256", "checksum": "5d8cd66a671723be7aca67ea4aa644ac60686c718b88146b5699829a4a918f2c"}, "config": {"enabled": true, "alias": "user", "schema": "tier2_curated", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A User is a name given to an individual who interacts with the website, either converted (signed up) or as a guest. For now, we only have converted users, but the model is extendable to the guest users in the future.", "columns": {"user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_indicator": {"name": "user_conversion_indicator", "description": "A User Conversion Indicator indicates whether or not a User is converted (signed up).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier2_curated/tier2_curated.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier2_curated", "alias": "user"}, "created_at": 1694360092.3924856, "relation_name": "`analytics-engineering-398318`.`ae_tier2_curated`.`user`", "raw_code": "{{ config(\r\n    schema='tier2_curated', \r\n    alias='user',\r\n    materialized='table') }}\r\n\r\nWITH users as (\r\n   select * from {{ ref('tier1_raw__user') }}\r\n)\r\n\r\nselect \r\n  user_id,\r\n  user_conversion_indicator\r\n\r\nfrom users", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier2_curated__user_conversion": {"database": "analytics-engineering-398318", "schema": "ae_tier2_curated", "name": "tier2_curated__user_conversion", "resource_type": "model", "package_name": "ae_project", "path": "tier2_curated/tier2_curated__user_conversion.sql", "original_file_path": "models/tier2_curated/tier2_curated__user_conversion.sql", "unique_id": "model.ae_project.tier2_curated__user_conversion", "fqn": ["ae_project", "tier2_curated", "tier2_curated__user_conversion"], "alias": "user_conversion", "checksum": {"name": "sha256", "checksum": "80ebb1b22746fc7832ad266622d3470e0327b3ec276f1821f5ef3bbbdd9e5031"}, "config": {"enabled": true, "alias": "user_conversion", "schema": "tier2_curated", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Conversion contains the users who are converted (signed up) to the website.", "columns": {"user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_indicator": {"name": "user_conversion_indicator", "description": ".'A User Conversion Indicator indicates whether or not a User is converted (signed up).' This attribute is always True, as this is a subtype entity of User, for converted users.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_channel_name": {"name": "user_conversion_channel_name", "description": "User Conversion Channel Name is the name of the channel which is the winner for the conversion.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_timestamp": {"name": "user_conversion_timestamp", "description": "User Conversion Timestamp is the time when the conversion is happened.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_via_session_indicator": {"name": "user_conversion_via_session_indicator", "description": "User Conversion via Session indicator indicates whether or not a User is conversion is initiated by a session (live or non-live).", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier2_curated/tier2_curated.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier2_curated", "alias": "user_conversion"}, "created_at": 1694360092.3956752, "relation_name": "`analytics-engineering-398318`.`ae_tier2_curated`.`user_conversion`", "raw_code": "{{ config(\r\n    schema='tier2_curated', \r\n    alias='user_conversion',\r\n    materialized='table') }}\r\n\r\nWITH users AS (\r\n    select * from {{ ref('tier1_raw__user') }}\r\n),\r\n\r\nuser_conversion AS (\r\n    select * from {{ ref('tier1_raw__user_conversion') }}\r\n),\r\n\r\nuser_session AS (\r\n    select * from {{ ref('tier1_raw__user_session') }}\r\n),\r\n\r\nchannel AS (\r\n    select * from {{ ref('tier1_raw__channel') }}\r\n),\r\n\r\nlive_session AS (\r\n    select * from {{ ref('tier1_raw__user_conversion_paid_live_session') }}\r\n    union all\r\n    select * from {{ ref('tier1_raw__user_conversion_organic_live_session') }}\r\n),\r\n\r\nwo_live_session AS (\r\n    select * from {{ ref('tier1_raw__user_conversion_without_live_session') }}\r\n),\r\n\r\nlive_session_channel AS (\r\n    select ls.*, c.channel_gid as user_conversion_channel_gid\r\n    from live_session ls\r\n    inner join user_session us on ls.user_session_gid = us.user_session_gid\r\n    inner join channel c on us.user_session_channel_gid=c.channel_gid\r\n),\r\n\r\nuser_conversion_all as (\r\n    select * from live_session_channel lsc\r\n    union all\r\n    select * from wo_live_session\r\n),\r\n\r\nuser_conversion_final as (\r\n    select \r\n        u.user_id,\r\n        u.user_conversion_indicator,\r\n        c.channel_name as user_conversion_channel_name,\r\n        uc.user_conversion_timestamp,\r\n        CASE \r\n        WHEN uca.user_session_gid is not null then True\r\n        ELSE False\r\n        END user_conversion_via_session_indicator\r\n    from user_conversion_all uca\r\n    inner join users u on uca.user_gid = u.user_gid\r\n    inner join user_conversion uc on uca.user_gid=uc.user_gid\r\n    inner join channel c on uca.user_conversion_channel_gid = c.channel_gid\r\n    where u.user_conversion_indicator = True\r\n)\r\n\r\nselect * from user_conversion_final", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}, {"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_session", "package": null, "version": null}, {"name": "tier1_raw__channel", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_without_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_session", "model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_without_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier1_raw__user_conversion_without_live_session": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__user_conversion_without_live_session", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__user_conversion_without_live_session.sql", "original_file_path": "models/tier1_raw/tier1_raw__user_conversion_without_live_session.sql", "unique_id": "model.ae_project.tier1_raw__user_conversion_without_live_session", "fqn": ["ae_project", "tier1_raw", "tier1_raw__user_conversion_without_live_session"], "alias": "user_conversion_without_live_session", "checksum": {"name": "sha256", "checksum": "c8ce8c8f7b71bedc39ca25b324d5af466f53ebd0fadd783217cba68f81e031dd"}, "config": {"enabled": true, "alias": "user_conversion_without_live_session", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Conversion Without Live Session contains the users who are converted (signed up) to the website, not via any paid or organic live session.", "columns": {"user_gid": {"name": "user_gid", "description": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_session_gid": {"name": "user_session_gid", "description": ".A User Session Gid is the generated surrogate key for a User Session. It's a composite key of User Gid and User Session Start Time. This attribute is nullable in case the conversion cannot be initiated to any User Session.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_channel_gid": {"name": "user_conversion_channel_gid", "description": "A User Conversion Channel Gid is the generated surrogate key for a Channel. This attribute is always maps the channel 'other' if there's no User Session initiated.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "user_conversion_without_live_session"}, "created_at": 1694360092.4552515, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`user_conversion_without_live_session`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='user_conversion_without_live_session',\r\n    materialized='table') }}\r\n\r\nWITH user_conversion as (\r\n  select * from {{ ref('tier1_raw__user_conversion') }}\r\n),\r\n\r\nuser_session as (\r\n  select * from {{ ref('tier1_raw__user_session') }}\r\n),\r\n\r\nchannel as (\r\n  select * from {{ ref('tier1_raw__channel') }}\r\n),\r\n\r\npaid_live_session as (\r\n  select * from {{ ref('tier1_raw__user_conversion_paid_live_session') }}\r\n),\r\n\r\norganic_live_session as (\r\n  select * from {{ ref('tier1_raw__user_conversion_organic_live_session') }}\r\n),\r\n\r\nwo_live_session as (\r\n  select \r\n    uc.user_gid, \r\n    us.user_session_gid, \r\n    CASE \r\n            WHEN c.channel_name is not null and c.channel_name = '{{ var(\"direct\") }}' THEN  '{{ var(\"direct\") }}' \r\n            ELSE  '{{ var(\"other\") }}' \r\n    END as conversion_channel_name,\r\n    CASE\r\n        WHEN us.user_gid is not null then row_number() over (partition by us.user_gid order by c.channel_priority_number) \r\n        WHEN us.user_gid is null then 1 \r\n  END as rownr\r\n  from user_conversion uc \r\n  left join user_session us on us.user_gid = uc.user_gid and uc.user_conversion_timestamp >= us.user_session_start_timestamp\r\n  left join channel c on us.user_session_channel_gid = c.channel_gid\r\n  left join paid_live_session pls on us.user_gid=pls.user_gid\r\n  left join organic_live_session ols on us.user_gid=ols.user_gid\r\n  where pls.user_gid is null and ols.user_gid is null\r\n),\r\n\r\nwo_live_session_final as (\r\n    select \r\n        wls.user_gid,\r\n        wls.user_session_gid, --nullable\r\n        c.channel_gid as user_conversion_channel_gid\r\n    from wo_live_session wls\r\n    inner join channel c on wls.conversion_channel_name=c.channel_name\r\n    where wls.rownr=1\r\n)\r\n\r\nselect * from wo_live_session_final", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_session", "package": null, "version": null}, {"name": "tier1_raw__channel", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_session", "model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_conversion_organic_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier1_raw__user_conversion_organic_live_session": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__user_conversion_organic_live_session", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__user_conversion_organic_live_session.sql", "original_file_path": "models/tier1_raw/tier1_raw__user_conversion_organic_live_session.sql", "unique_id": "model.ae_project.tier1_raw__user_conversion_organic_live_session", "fqn": ["ae_project", "tier1_raw", "tier1_raw__user_conversion_organic_live_session"], "alias": "user_conversion_organic_live_session", "checksum": {"name": "sha256", "checksum": "25721da537b58283fb9a511a488abe0a27bc46ac4d32510bf0e0593403d55ed3"}, "config": {"enabled": true, "alias": "user_conversion_organic_live_session", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Conversion Organic Live Session contains the users who are converted (signed up) to the website via an Organic Live Session, and not hijacked by a Paid Live Session.", "columns": {"user_gid": {"name": "user_gid", "description": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_session_gid": {"name": "user_session_gid", "description": "A User Session Gid is the generated surrogate key for a User Session. It's a composite key of User Gid and User Session Start Time.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "user_conversion_organic_live_session"}, "created_at": 1694360092.4516044, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`user_conversion_organic_live_session`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='user_conversion_organic_live_session',\r\n    materialized='table') }}\r\n\r\nWITH user_conversion as (\r\n  select * from {{ ref('tier1_raw__user_conversion') }}\r\n),\r\n\r\nuser_session as (\r\n  select * from {{ ref('tier1_raw__user_session') }}\r\n),\r\n\r\nchannel as (\r\n  select * from {{ ref('tier1_raw__channel') }}\r\n),\r\n\r\npaid_live_session as (\r\n  select * from {{ ref('tier1_raw__user_conversion_paid_live_session') }}\r\n),\r\n\r\norganic_live_session as (\r\n  select \r\n    us.user_gid, \r\n    us.user_session_gid, \r\n    us.user_session_start_timestamp, \r\n    uc.user_conversion_timestamp, \r\n    row_number() over(partition by uc.user_gid order by us.user_session_start_timestamp) as rownr\r\n  from user_session us\r\n  inner join user_conversion uc on us.user_gid=uc.user_gid\r\n  inner join channel c on us.user_session_channel_gid=c.channel_gid\r\n  left join paid_live_session pls on uc.user_gid = pls.user_gid\r\n  where uc.user_conversion_timestamp between us.user_session_start_timestamp and us.user_session_end_timestamp\r\n  and c.channel_name = '{{ var(\"organic_click\") }}'\r\n  and pls.user_gid is null\r\n)\r\n\r\nselect \r\n ols.user_gid,\r\n ols.user_session_gid\r\n from organic_live_session ols\r\nwhere ols.rownr=1", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_session", "package": null, "version": null}, {"name": "tier1_raw__channel", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_session", "model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user_conversion_paid_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier1_raw__user_conversion_paid_live_session": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__user_conversion_paid_live_session", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__user_conversion_paid_live_session.sql", "original_file_path": "models/tier1_raw/tier1_raw__user_conversion_paid_live_session.sql", "unique_id": "model.ae_project.tier1_raw__user_conversion_paid_live_session", "fqn": ["ae_project", "tier1_raw", "tier1_raw__user_conversion_paid_live_session"], "alias": "user_conversion_paid_live_session", "checksum": {"name": "sha256", "checksum": "d0840a5e5c61abf2913aa7b9a4c2b144b5f37ad206ca037067cbe9d6dfc58179"}, "config": {"enabled": true, "alias": "user_conversion_paid_live_session", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Conversion Paid Live Session contains the users who are converted (signed up) to the website via a Paid Live Session.", "columns": {"user_gid": {"name": "user_gid", "description": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_session_gid": {"name": "user_session_gid", "description": "A User Session Gid is the generated surrogate key for a User Session. It's a composite key of User Gid and User Session Start Time.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "user_conversion_paid_live_session"}, "created_at": 1694360092.4580789, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`user_conversion_paid_live_session`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='user_conversion_paid_live_session',\r\n    materialized='table') }}\r\n\r\nWITH user_conversion as (\r\n  select * from {{ ref('tier1_raw__user_conversion') }}\r\n),\r\n\r\nuser_session as (\r\n  select * from {{ ref('tier1_raw__user_session') }}\r\n),\r\n\r\nchannel as (\r\n  select * from {{ ref('tier1_raw__channel') }}\r\n),\r\n\r\npaid_live_session as (\r\n  select \r\n    us.user_gid, \r\n    us.user_session_gid, \r\n    us.user_session_start_timestamp, \r\n    uc.user_conversion_timestamp, \r\n    row_number() over(partition by uc.user_gid order by us.user_session_start_timestamp) as rownr\r\n  from user_session us\r\n  inner join user_conversion uc on us.user_gid=uc.user_gid\r\n  inner join channel c on us.user_session_channel_gid=c.channel_gid\r\n  where uc.user_conversion_timestamp between us.user_session_start_timestamp and us.user_session_end_timestamp\r\n  and c.channel_name in ('{{ var(\"paid_click\") }}', '{{ var(\"paid_impression\") }}')\r\n)\r\n\r\nselect \r\n pls.user_gid,\r\n pls.user_session_gid\r\n from paid_live_session pls\r\nwhere rownr=1", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_session", "package": null, "version": null}, {"name": "tier1_raw__channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_session", "model.ae_project.tier1_raw__channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier1_raw__user_conversion": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__user_conversion", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__user_conversion.sql", "original_file_path": "models/tier1_raw/tier1_raw__user_conversion.sql", "unique_id": "model.ae_project.tier1_raw__user_conversion", "fqn": ["ae_project", "tier1_raw", "tier1_raw__user_conversion"], "alias": "user_conversion", "checksum": {"name": "sha256", "checksum": "6667e67631f8bdf9ffd7f3d50bc031828bc2310cf4323cdf775041936bebcac0"}, "config": {"enabled": true, "alias": "user_conversion", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Conversion contains the users who are converted (signed up) to the website.", "columns": {"user_gid": {"name": "user_gid", "description": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_timestamp": {"name": "user_conversion_timestamp", "description": "User Conversion Timestamp is the time when the conversion is happened.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "user_conversion"}, "created_at": 1694360092.4482956, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`user_conversion`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='user_conversion',\r\n    materialized='table') }}\r\n\r\nWITH users as (\r\n    select * from {{ ref('tier1_raw__user') }}\r\n    where user_conversion_indicator=true),\r\n\r\nconversion as (\r\n    select * from {{ ref('stg_sources__conversions') }}\r\n),\r\n\r\nuser_conversion as (\r\n    select \r\n    u.user_gid,\r\n    c.registration_time as user_conversion_timestamp\r\n    from users u\r\n    inner join conversion c on u.user_id=c.user_id\r\n)\r\n\r\nselect * from user_conversion", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}, {"name": "stg_sources__conversions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.tier1_raw__user", "model.ae_project.stg_sources__conversions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier1_raw__user": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__user", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__user.sql", "original_file_path": "models/tier1_raw/tier1_raw__user.sql", "unique_id": "model.ae_project.tier1_raw__user", "fqn": ["ae_project", "tier1_raw", "tier1_raw__user"], "alias": "user", "checksum": {"name": "sha256", "checksum": "7d72f35cdcc18267169e1e3f86975226875a34dfd95816fea358807436123b69"}, "config": {"enabled": true, "alias": "user", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A User is a name given to an individual who interacts with the website, either converted (signed up) or as a guest. For now, we only have converted users, but the model is extendable to the guest users in the future.", "columns": {"user_gid": {"name": "user_gid", "description": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_conversion_indicator": {"name": "user_conversion_indicator", "description": "A User Conversion Indicator indicates whether or not a User is converted (signed up).", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "user"}, "created_at": 1694360092.445032, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`user`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='user',\r\n    materialized='table') }}\r\n\r\nWITH session_users as (\r\n   select distinct user_id from {{ ref('stg_sources__sessions') }}\r\n),\r\n\r\nconversion_users as (\r\n   select distinct user_id, registration_time from {{ ref('stg_sources__conversions') }}\r\n),\r\n\r\nall_users AS(\r\n SELECT \r\n  coalesce(c.user_id, s.user_id) as user_id,\r\n  case when c.user_id is not null then true else false end as user_conversion_indicator,\r\n  coalesce(c.registration_time, null) as user_conversion_timestamp\r\nFROM  conversion_users c\r\nfull join session_users s on c.user_id = s.user_id )\r\n\r\nselect \r\n  sha256(concat(cast(user_id as STRING), cast(user_conversion_indicator as STRING))) as user_gid,\r\n  user_id,\r\n  user_conversion_indicator\r\n\r\nfrom all_users", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}, {"name": "stg_sources__conversions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__sessions", "model.ae_project.stg_sources__conversions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.stg_sources__sessions": {"database": "analytics-engineering-398318", "schema": "ae", "name": "stg_sources__sessions", "resource_type": "model", "package_name": "ae_project", "path": "staging/stg_sources__sessions.sql", "original_file_path": "models/staging/stg_sources__sessions.sql", "unique_id": "model.ae_project.stg_sources__sessions", "fqn": ["ae_project", "staging", "stg_sources__sessions"], "alias": "stg_sources__sessions", "checksum": {"name": "sha256", "checksum": "b4a4ce510f10e399e9704f05a3848d30ed7a7311f3231847b6ea9b87025efd60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a staging entity for multiple use of the data source sessions.", "columns": {"user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": "INT64", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "time_started": {"name": "time_started", "description": "Time Started is the time when the session is started by the User.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "The indicator which states if medium which initiated the session is paid or not.", "meta": {}, "data_type": "BOOL", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "medium": {"name": "medium", "description": "A medium is a system or channel through which a user initiated a session.", "meta": {}, "data_type": "STRING", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/staging/stg_sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1694360092.6051025, "relation_name": null, "raw_code": "with\r\n    source as (select * from {{ source(\"sources\", \"sessions\") }}),\r\n\r\n    session_final as (\r\n        select distinct user_id, time_started, is_paid, medium from source\r\n    )\r\n\r\nselect *\r\nfrom session_final", "language": "sql", "refs": [], "sources": [["sources", "sessions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ae_project.sources.sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.tier1_raw__channel": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__channel", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__channel.sql", "original_file_path": "models/tier1_raw/tier1_raw__channel.sql", "unique_id": "model.ae_project.tier1_raw__channel", "fqn": ["ae_project", "tier1_raw", "tier1_raw__channel"], "alias": "channel", "checksum": {"name": "sha256", "checksum": "9cade64b8f8312b4a30641d7d06ec77eb601a3f1c1e9f0f86e1a00c3f2c9b838"}, "config": {"enabled": true, "alias": "channel", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Channel is a collection of conversion channel names, their prioritization in conversation strategy and lifespan of channels (if applicable).", "columns": {"channel_gid": {"name": "channel_gid", "description": "Channel Gid is the generated surrogate key for a Channel.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "channel_name": {"name": "channel_name", "description": "Channel Name is the name of the channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "channel_priority_number": {"name": "channel_priority_number", "description": "Channel Priority Number is An ascending number of the priority order (from highest to lowest) of the channel, according to the business logic:\r\n    * The paid channels (click or impression) have the highest priority (1), as they also have ability of hijacking.\r\n    * The organic clicks has the second order of priority (2).\r\n    * Direct channel has the third order of priority (3).\r\n    * Other mediums have the last (4).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "channel_lifespan_duration": {"name": "channel_lifespan_duration", "description": "Channel Lifespan Duration is the duration of lifespan (in hours) of the session in conversion strategy, depends on the channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "channel"}, "created_at": 1694360092.467374, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`channel`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='channel',\r\n    materialized='table') }}\r\n\r\nWITH channel_seed as (\r\n   select * from {{ ref('channel_seed') }}\r\n)\r\nselect \r\n sha256(cs.channel_name) as channel_gid,\r\n cs.channel_name,\r\n cast(cs.channel_prio as INTEGER) as channel_priority_number,\r\n cast(cs.channel_lifespan as INTEGER) as channel_lifespan_duration\r\nfrom channel_seed cs", "language": "sql", "refs": [{"name": "channel_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.ae_project.channel_seed"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.stg_sources__conversions": {"database": "analytics-engineering-398318", "schema": "ae", "name": "stg_sources__conversions", "resource_type": "model", "package_name": "ae_project", "path": "staging/stg_sources__conversions.sql", "original_file_path": "models/staging/stg_sources__conversions.sql", "unique_id": "model.ae_project.stg_sources__conversions", "fqn": ["ae_project", "staging", "stg_sources__conversions"], "alias": "stg_sources__conversions", "checksum": {"name": "sha256", "checksum": "e4f3bd088afb316e3c6351b55525bd36050a73ae8cb871158dc54da9ba7fe16c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a staging entity for multiple use of the data source conversions.", "columns": {"user_id": {"name": "user_id", "description": "A User Id is the unique identifier of a User.", "meta": {}, "data_type": "INT64", "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "registration_time": {"name": "registration_time", "description": "Registration time is the time when the conversion is happened.", "meta": {}, "data_type": "TIMESTAMP", "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/staging/stg_sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1694360092.6083314, "relation_name": null, "raw_code": "with source as (\r\n    SELECT * FROM {{ source('sources', 'conversions') }}\r\n),\r\n\r\nconversion_final AS (\r\n  SELECT DISTINCT\r\n    user_id,\r\n    registration_time\r\n   from source\r\n)\r\n\r\nselect * from conversion_final", "language": "sql", "refs": [], "sources": [["sources", "conversions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ae_project.sources.conversions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.ae_project.channel_seed": {"database": "analytics-engineering-398318", "schema": "ae_sources", "name": "channel_seed", "resource_type": "seed", "package_name": "ae_project", "path": "channel_seed.csv", "original_file_path": "seeds/channel_seed.csv", "unique_id": "seed.ae_project.channel_seed", "fqn": ["ae_project", "channel_seed"], "alias": "channel_seed", "checksum": {"name": "sha256", "checksum": "86b47a11789c413da5ce7837a19d59865c4986d81470358cac3028a837b82575"}, "config": {"enabled": true, "alias": null, "schema": "sources", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Channel Seed is a collection of conversion channel names, their prioritization in conversation strategy and lifespan of channels (if applicable).", "columns": {"channel_name": {"name": "channel_name", "description": "Channel Name is the name of the channel which is the winner for the conversion.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "channel_prio": {"name": "channel_prio", "description": "Channel Prio is An ascending number of the priority order (from highest to lowest) of the channel, according to the business logic:\r\n    * The paid channels (click or impression) have the highest priority (1), as they also have ability of hijacking.\r\n    * The organic clicks has the second order of priority (2).\r\n    * Direct channel has the third order of priority (3).\r\n    * Other mediums have the last (4).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "channel_lifespan": {"name": "channel_lifespan", "description": "Channel Lifespan is the duration of lifespan (in hours) of the session in conversion strategy, depends on the channel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://seeds/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "sources"}, "created_at": 1694360092.6462226, "relation_name": "`analytics-engineering-398318`.`ae_sources`.`channel_seed`", "raw_code": "", "root_path": "/usr/src/develop/user-220074/environment-233701/repository-173362", "depends_on": {"macros": []}}, "test.ae_project.not_null_tier3_consumption__user_user_id.1e70746daf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('tier3_consumption__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__user_user_id.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_user_id.1e70746daf", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_user_id"], "alias": "not_null_tier3_consumption__user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.2479644, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier3_consumption__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.tier3_consumption__user", "attached_node": "model.ae_project.tier3_consumption__user"}, "test.ae_project.not_null_tier3_consumption__user_user_conversion_indicator.b1ed0e4066": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier3_consumption__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_user_conversion_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__user_user_conversion_indicator.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_user_conversion_indicator.b1ed0e4066", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_user_conversion_indicator"], "alias": "not_null_tier3_consumption__user_user_conversion_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.2504048, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier3_consumption__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier3_consumption__user", "attached_node": "model.ae_project.tier3_consumption__user"}, "test.ae_project.accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False.9109775d10": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier3_consumption__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier3_consumpt_179906c119705c3573a571b1bc3d98ef.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False.9109775d10", "fqn": ["ae_project", "tier3_consumption", "accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False"], "alias": "accepted_values_tier3_consumpt_179906c119705c3573a571b1bc3d98ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier3_consumpt_179906c119705c3573a571b1bc3d98ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier3_consumpt_179906c119705c3573a571b1bc3d98ef"}, "created_at": 1694360092.3396015, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier3_consumpt_179906c119705c3573a571b1bc3d98ef\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier3_consumption__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier3_consumption__user", "attached_node": "model.ae_project.tier3_consumption__user"}, "test.ae_project.unique_tier3_consumption__user__user_id_user_conversion_indicator_.72b8da2232": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(user_id || '-' || user_conversion_indicator)", "model": "{{ get_where_subquery(ref('tier3_consumption__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier3_consumption__user__user_id_user_conversion_indicator_", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier3_consumption__user_10c0f3de03a631bfa52da3eadcf36c9e.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.unique_tier3_consumption__user__user_id_user_conversion_indicator_.72b8da2232", "fqn": ["ae_project", "tier3_consumption", "unique_tier3_consumption__user__user_id_user_conversion_indicator_"], "alias": "unique_tier3_consumption__user_10c0f3de03a631bfa52da3eadcf36c9e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_tier3_consumption__user_10c0f3de03a631bfa52da3eadcf36c9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tier3_consumption__user_10c0f3de03a631bfa52da3eadcf36c9e"}, "created_at": 1694360092.3537486, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tier3_consumption__user_10c0f3de03a631bfa52da3eadcf36c9e\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier3_consumption__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.tier3_consumption__user", "attached_node": "model.ae_project.tier3_consumption__user"}, "test.ae_project.not_null_tier3_consumption__user_conversion_user_id.707d65f0dd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_conversion_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__user_conversion_user_id.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_conversion_user_id.707d65f0dd", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_conversion_user_id"], "alias": "not_null_tier3_consumption__user_conversion_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.3560755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_indicator.9cfb6bf655": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_conversion_user_conversion_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__us_ac9cace0d036b2a640df0f5e10932f50.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_indicator.9cfb6bf655", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_conversion_user_conversion_indicator"], "alias": "not_null_tier3_consumption__us_ac9cace0d036b2a640df0f5e10932f50", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier3_consumption__us_ac9cace0d036b2a640df0f5e10932f50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier3_consumption__us_ac9cace0d036b2a640df0f5e10932f50"}, "created_at": 1694360092.358647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier3_consumption__us_ac9cace0d036b2a640df0f5e10932f50\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False.1e77c378d5": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier3_consumpt_2229244d5cfd9d0761c0860dc585ddef.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False.1e77c378d5", "fqn": ["ae_project", "tier3_consumption", "accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False"], "alias": "accepted_values_tier3_consumpt_2229244d5cfd9d0761c0860dc585ddef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier3_consumpt_2229244d5cfd9d0761c0860dc585ddef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier3_consumpt_2229244d5cfd9d0761c0860dc585ddef"}, "created_at": 1694360092.3610177, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier3_consumpt_2229244d5cfd9d0761c0860dc585ddef\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_channel_name.45eb9f2303": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_channel_name", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_conversion_user_conversion_channel_name", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__us_1164b33f58a2c244cea1a993d13a7127.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_channel_name.45eb9f2303", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_conversion_user_conversion_channel_name"], "alias": "not_null_tier3_consumption__us_1164b33f58a2c244cea1a993d13a7127", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier3_consumption__us_1164b33f58a2c244cea1a993d13a7127", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier3_consumption__us_1164b33f58a2c244cea1a993d13a7127"}, "created_at": 1694360092.366894, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier3_consumption__us_1164b33f58a2c244cea1a993d13a7127\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_channel_name", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.9c0f9dbdc1": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["paid_click", "paid_impression", "organic_click", "direct", "other"], "column_name": "user_conversion_channel_name", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier3_consumpt_517bdf98fcc917e21ad04028a3942822.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.9c0f9dbdc1", "fqn": ["ae_project", "tier3_consumption", "accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other"], "alias": "accepted_values_tier3_consumpt_517bdf98fcc917e21ad04028a3942822", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier3_consumpt_517bdf98fcc917e21ad04028a3942822", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier3_consumpt_517bdf98fcc917e21ad04028a3942822"}, "created_at": 1694360092.369218, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier3_consumpt_517bdf98fcc917e21ad04028a3942822\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_channel_name", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_timestamp.e67f2f2d0c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_timestamp", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_conversion_user_conversion_timestamp", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__us_b12e689d50542b6ed1d062a83bee18b5.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_timestamp.e67f2f2d0c", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_conversion_user_conversion_timestamp"], "alias": "not_null_tier3_consumption__us_b12e689d50542b6ed1d062a83bee18b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier3_consumption__us_b12e689d50542b6ed1d062a83bee18b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier3_consumption__us_b12e689d50542b6ed1d062a83bee18b5"}, "created_at": 1694360092.3773355, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier3_consumption__us_b12e689d50542b6ed1d062a83bee18b5\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_timestamp", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator.860cf0dcc9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_via_session_indicator", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier3_consumption__us_f9b57b57b90b0c66a5c77194178f34d9.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator.860cf0dcc9", "fqn": ["ae_project", "tier3_consumption", "not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator"], "alias": "not_null_tier3_consumption__us_f9b57b57b90b0c66a5c77194178f34d9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier3_consumption__us_f9b57b57b90b0c66a5c77194178f34d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier3_consumption__us_f9b57b57b90b0c66a5c77194178f34d9"}, "created_at": 1694360092.379727, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier3_consumption__us_f9b57b57b90b0c66a5c77194178f34d9\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_via_session_indicator", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False.91be351bfb": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_via_session_indicator", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier3_consumpt_89d2b581358c9447b58d52bbe3c59351.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False.91be351bfb", "fqn": ["ae_project", "tier3_consumption", "accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False"], "alias": "accepted_values_tier3_consumpt_89d2b581358c9447b58d52bbe3c59351", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier3_consumpt_89d2b581358c9447b58d52bbe3c59351", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier3_consumpt_89d2b581358c9447b58d52bbe3c59351"}, "created_at": 1694360092.38232, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier3_consumpt_89d2b581358c9447b58d52bbe3c59351\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_via_session_indicator", "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_.564363f97f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(user_id || '-' || user_conversion_indicator)", "model": "{{ get_where_subquery(ref('tier3_consumption__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier3_consumption__user_87fbc263a946fde28f8d4371df423125.sql", "original_file_path": "models/tier3_consumption/tier3_consumption.yml", "unique_id": "test.ae_project.unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_.564363f97f", "fqn": ["ae_project", "tier3_consumption", "unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_"], "alias": "unique_tier3_consumption__user_87fbc263a946fde28f8d4371df423125", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_tier3_consumption__user_87fbc263a946fde28f8d4371df423125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tier3_consumption__user_87fbc263a946fde28f8d4371df423125"}, "created_at": 1694360092.387783, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tier3_consumption__user_87fbc263a946fde28f8d4371df423125\") }}", "language": "sql", "refs": [{"name": "tier3_consumption__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier3_consumption__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.tier3_consumption__user_conversion", "attached_node": "model.ae_project.tier3_consumption__user_conversion"}, "test.ae_project.not_null_tier2_curated__user_user_id.1a6cc8ec63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('tier2_curated__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_user_id.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_user_id.1a6cc8ec63", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_user_id"], "alias": "not_null_tier2_curated__user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.3966677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier2_curated__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.tier2_curated__user", "attached_node": "model.ae_project.tier2_curated__user"}, "test.ae_project.not_null_tier2_curated__user_user_conversion_indicator.c2c47d8d21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier2_curated__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_user_conversion_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_user_conversion_indicator.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_user_conversion_indicator.c2c47d8d21", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_user_conversion_indicator"], "alias": "not_null_tier2_curated__user_user_conversion_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.3990035, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier2_curated__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier2_curated__user", "attached_node": "model.ae_project.tier2_curated__user"}, "test.ae_project.accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False.9094d41297": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier2_curated__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier2_curated__1ae7b5038d2a095db6a81c0edb5be693.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False.9094d41297", "fqn": ["ae_project", "tier2_curated", "accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False"], "alias": "accepted_values_tier2_curated__1ae7b5038d2a095db6a81c0edb5be693", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier2_curated__1ae7b5038d2a095db6a81c0edb5be693", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier2_curated__1ae7b5038d2a095db6a81c0edb5be693"}, "created_at": 1694360092.4016373, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier2_curated__1ae7b5038d2a095db6a81c0edb5be693\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier2_curated__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier2_curated__user", "attached_node": "model.ae_project.tier2_curated__user"}, "test.ae_project.unique_tier2_curated__user__user_id_user_conversion_indicator_.e2b6afca5f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(user_id || '-' || user_conversion_indicator)", "model": "{{ get_where_subquery(ref('tier2_curated__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier2_curated__user__user_id_user_conversion_indicator_", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier2_curated__user__user_id_user_conversion_indicator_.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.unique_tier2_curated__user__user_id_user_conversion_indicator_.e2b6afca5f", "fqn": ["ae_project", "tier2_curated", "unique_tier2_curated__user__user_id_user_conversion_indicator_"], "alias": "unique_tier2_curated__user__user_id_user_conversion_indicator_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.4070733, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier2_curated__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier2_curated__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.tier2_curated__user", "attached_node": "model.ae_project.tier2_curated__user"}, "test.ae_project.not_null_tier2_curated__user_conversion_user_id.ec7b75f850": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_conversion_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_conversion_user_id.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_conversion_user_id.ec7b75f850", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_conversion_user_id"], "alias": "not_null_tier2_curated__user_conversion_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.4096994, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_indicator.65d12ab355": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_conversion_user_conversion_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_c_fee8456438c1c737b102ce3fc69caa49.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_indicator.65d12ab355", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_conversion_user_conversion_indicator"], "alias": "not_null_tier2_curated__user_c_fee8456438c1c737b102ce3fc69caa49", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier2_curated__user_c_fee8456438c1c737b102ce3fc69caa49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier2_curated__user_c_fee8456438c1c737b102ce3fc69caa49"}, "created_at": 1694360092.4120173, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier2_curated__user_c_fee8456438c1c737b102ce3fc69caa49\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False.6cd53f27ba": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier2_curated__0af603b4e65d20fdfa51da9e45e0b38b.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False.6cd53f27ba", "fqn": ["ae_project", "tier2_curated", "accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False"], "alias": "accepted_values_tier2_curated__0af603b4e65d20fdfa51da9e45e0b38b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier2_curated__0af603b4e65d20fdfa51da9e45e0b38b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier2_curated__0af603b4e65d20fdfa51da9e45e0b38b"}, "created_at": 1694360092.4143758, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier2_curated__0af603b4e65d20fdfa51da9e45e0b38b\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_channel_name.6dc8378df0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_channel_name", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_conversion_user_conversion_channel_name", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_c_c70a648224f539e927a43cd0367b3983.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_channel_name.6dc8378df0", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_conversion_user_conversion_channel_name"], "alias": "not_null_tier2_curated__user_c_c70a648224f539e927a43cd0367b3983", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier2_curated__user_c_c70a648224f539e927a43cd0367b3983", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier2_curated__user_c_c70a648224f539e927a43cd0367b3983"}, "created_at": 1694360092.4203317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier2_curated__user_c_c70a648224f539e927a43cd0367b3983\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_channel_name", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.fe4e47b1ee": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["paid_click", "paid_impression", "organic_click", "direct", "other"], "column_name": "user_conversion_channel_name", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier2_curated__a7adcdbe57bceca0eb43c9adc0aadafa.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.fe4e47b1ee", "fqn": ["ae_project", "tier2_curated", "accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other"], "alias": "accepted_values_tier2_curated__a7adcdbe57bceca0eb43c9adc0aadafa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier2_curated__a7adcdbe57bceca0eb43c9adc0aadafa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier2_curated__a7adcdbe57bceca0eb43c9adc0aadafa"}, "created_at": 1694360092.4226851, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier2_curated__a7adcdbe57bceca0eb43c9adc0aadafa\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_channel_name", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_timestamp.e4fc81b9db": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_timestamp", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_conversion_user_conversion_timestamp", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_c_da6e38891b377e2d9efff5924bf0f5b2.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_timestamp.e4fc81b9db", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_conversion_user_conversion_timestamp"], "alias": "not_null_tier2_curated__user_c_da6e38891b377e2d9efff5924bf0f5b2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier2_curated__user_c_da6e38891b377e2d9efff5924bf0f5b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier2_curated__user_c_da6e38891b377e2d9efff5924bf0f5b2"}, "created_at": 1694360092.4283657, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier2_curated__user_c_da6e38891b377e2d9efff5924bf0f5b2\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_timestamp", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator.128a877f18": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_via_session_indicator", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier2_curated__user_c_b0a52a6d23e1df62bd04c4cbded60b30.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator.128a877f18", "fqn": ["ae_project", "tier2_curated", "not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator"], "alias": "not_null_tier2_curated__user_c_b0a52a6d23e1df62bd04c4cbded60b30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier2_curated__user_c_b0a52a6d23e1df62bd04c4cbded60b30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier2_curated__user_c_b0a52a6d23e1df62bd04c4cbded60b30"}, "created_at": 1694360092.4307296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier2_curated__user_c_b0a52a6d23e1df62bd04c4cbded60b30\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_via_session_indicator", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False.50209a829c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_via_session_indicator", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier2_curated__b80d3209ba02da55bb44c7b7f93a5e08.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False.50209a829c", "fqn": ["ae_project", "tier2_curated", "accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False"], "alias": "accepted_values_tier2_curated__b80d3209ba02da55bb44c7b7f93a5e08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier2_curated__b80d3209ba02da55bb44c7b7f93a5e08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier2_curated__b80d3209ba02da55bb44c7b7f93a5e08"}, "created_at": 1694360092.4330635, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier2_curated__b80d3209ba02da55bb44c7b7f93a5e08\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_via_session_indicator", "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_.766910495e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(user_id || '-' || user_conversion_indicator)", "model": "{{ get_where_subquery(ref('tier2_curated__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier2_curated__user_con_79aba8cfaaea3d962918014434229832.sql", "original_file_path": "models/tier2_curated/tier2_curated.yml", "unique_id": "test.ae_project.unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_.766910495e", "fqn": ["ae_project", "tier2_curated", "unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_"], "alias": "unique_tier2_curated__user_con_79aba8cfaaea3d962918014434229832", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_tier2_curated__user_con_79aba8cfaaea3d962918014434229832", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tier2_curated__user_con_79aba8cfaaea3d962918014434229832"}, "created_at": 1694360092.4387746, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tier2_curated__user_con_79aba8cfaaea3d962918014434229832\") }}", "language": "sql", "refs": [{"name": "tier2_curated__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier2_curated__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.tier2_curated__user_conversion", "attached_node": "model.ae_project.tier2_curated__user_conversion"}, "test.ae_project.unique_tier1_raw__user_user_gid.fb11ca5714": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_user_gid.fb11ca5714", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_user_gid"], "alias": "unique_tier1_raw__user_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.468371, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user", "attached_node": "model.ae_project.tier1_raw__user"}, "test.ae_project.not_null_tier1_raw__user_user_gid.35f9954c17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_user_gid.35f9954c17", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_user_gid"], "alias": "not_null_tier1_raw__user_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.4707248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user", "attached_node": "model.ae_project.tier1_raw__user"}, "test.ae_project.not_null_tier1_raw__user_user_id.d930db0ef0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('tier1_raw__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_user_id.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_user_id.d930db0ef0", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_user_id"], "alias": "not_null_tier1_raw__user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.4733014, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.tier1_raw__user", "attached_node": "model.ae_project.tier1_raw__user"}, "test.ae_project.not_null_tier1_raw__user_user_conversion_indicator.0bdfebbec3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier1_raw__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_user_conversion_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_user_conversion_indicator.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_user_conversion_indicator.0bdfebbec3", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_user_conversion_indicator"], "alias": "not_null_tier1_raw__user_user_conversion_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.475624, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier1_raw__user", "attached_node": "model.ae_project.tier1_raw__user"}, "test.ae_project.accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False.b395d5765f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "user_conversion_indicator", "model": "{{ get_where_subquery(ref('tier1_raw__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_tier1_raw__use_911509022b9549889a640d245083557d.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False.b395d5765f", "fqn": ["ae_project", "tier1_raw", "accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False"], "alias": "accepted_values_tier1_raw__use_911509022b9549889a640d245083557d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_tier1_raw__use_911509022b9549889a640d245083557d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_tier1_raw__use_911509022b9549889a640d245083557d"}, "created_at": 1694360092.4779797, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_tier1_raw__use_911509022b9549889a640d245083557d\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_indicator", "file_key_name": "models.tier1_raw__user", "attached_node": "model.ae_project.tier1_raw__user"}, "test.ae_project.unique_tier1_raw__user__user_id_user_conversion_indicator_.4150292f96": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(user_id || '-' || user_conversion_indicator)", "model": "{{ get_where_subquery(ref('tier1_raw__user')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user__user_id_user_conversion_indicator_", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user__user_id_user_conversion_indicator_.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user__user_id_user_conversion_indicator_.4150292f96", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user__user_id_user_conversion_indicator_"], "alias": "unique_tier1_raw__user__user_id_user_conversion_indicator_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.4837153, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.tier1_raw__user", "attached_node": "model.ae_project.tier1_raw__user"}, "test.ae_project.unique_tier1_raw__user_conversion_user_gid.a3f8810911": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_conversion_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_conversion_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_conversion_user_gid.a3f8810911", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_conversion_user_gid"], "alias": "unique_tier1_raw__user_conversion_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.4860446, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion", "attached_node": "model.ae_project.tier1_raw__user_conversion"}, "test.ae_project.not_null_tier1_raw__user_conversion_user_gid.6da6ddc3b8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conversion_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_user_gid.6da6ddc3b8", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_user_gid"], "alias": "not_null_tier1_raw__user_conversion_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.488346, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion", "attached_node": "model.ae_project.tier1_raw__user_conversion"}, "test.ae_project.relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_.c1754ec569": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user')", "field": "user_gid", "column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__4b104cd01bfe5cb722e508d0b8491290.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_.c1754ec569", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_"], "alias": "relationships_tier1_raw__user__4b104cd01bfe5cb722e508d0b8491290", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__4b104cd01bfe5cb722e508d0b8491290", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__4b104cd01bfe5cb722e508d0b8491290"}, "created_at": 1694360092.4910064, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__4b104cd01bfe5cb722e508d0b8491290\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}, {"name": "tier1_raw__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion", "attached_node": "model.ae_project.tier1_raw__user_conversion"}, "test.ae_project.not_null_tier1_raw__user_conversion_user_conversion_timestamp.3e7f9cc89e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_timestamp", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_user_conversion_timestamp", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conversion_user_conversion_timestamp.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_user_conversion_timestamp.3e7f9cc89e", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_user_conversion_timestamp"], "alias": "not_null_tier1_raw__user_conversion_user_conversion_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.500543, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_timestamp", "file_key_name": "models.tier1_raw__user_conversion", "attached_node": "model.ae_project.tier1_raw__user_conversion"}, "test.ae_project.unique_tier1_raw__user_conversion_organic_live_session_user_gid.1634aab819": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_organic_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_conversion_organic_live_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_conversion_organic_live_session_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_conversion_organic_live_session_user_gid.1634aab819", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_conversion_organic_live_session_user_gid"], "alias": "unique_tier1_raw__user_conversion_organic_live_session_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.5029035, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user_conversion_organic_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_organic_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_organic_live_session"}, "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_gid.a3244e8642": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_organic_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_organic_live_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conve_e9fc6dfcae13baccf451b7f56ce678c0.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_gid.a3244e8642", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_organic_live_session_user_gid"], "alias": "not_null_tier1_raw__user_conve_e9fc6dfcae13baccf451b7f56ce678c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier1_raw__user_conve_e9fc6dfcae13baccf451b7f56ce678c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier1_raw__user_conve_e9fc6dfcae13baccf451b7f56ce678c0"}, "created_at": 1694360092.5051913, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier1_raw__user_conve_e9fc6dfcae13baccf451b7f56ce678c0\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion_organic_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_organic_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_organic_live_session"}, "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.a5c96ea83c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user_conversion')", "field": "user_gid", "column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_organic_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__96ce09fe532881e2fdd57336975e82c9.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.a5c96ea83c", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_"], "alias": "relationships_tier1_raw__user__96ce09fe532881e2fdd57336975e82c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__96ce09fe532881e2fdd57336975e82c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__96ce09fe532881e2fdd57336975e82c9"}, "created_at": 1694360092.5075326, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__96ce09fe532881e2fdd57336975e82c9\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_organic_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_organic_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_organic_live_session"}, "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid.a924e9a968": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_session_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_organic_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conve_6a62e8e6c164c0abe7978c0f161f89ce.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid.a924e9a968", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid"], "alias": "not_null_tier1_raw__user_conve_6a62e8e6c164c0abe7978c0f161f89ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier1_raw__user_conve_6a62e8e6c164c0abe7978c0f161f89ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier1_raw__user_conve_6a62e8e6c164c0abe7978c0f161f89ce"}, "created_at": 1694360092.514007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier1_raw__user_conve_6a62e8e6c164c0abe7978c0f161f89ce\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion_organic_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_gid", "file_key_name": "models.tier1_raw__user_conversion_organic_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_organic_live_session"}, "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.8c36a1b800": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user_session')", "field": "user_session_gid", "column_name": "user_session_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_organic_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__6bacba1b6158e326de07eb44e9dc709c.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.8c36a1b800", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_"], "alias": "relationships_tier1_raw__user__6bacba1b6158e326de07eb44e9dc709c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__6bacba1b6158e326de07eb44e9dc709c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__6bacba1b6158e326de07eb44e9dc709c"}, "created_at": 1694360092.5163069, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__6bacba1b6158e326de07eb44e9dc709c\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_organic_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_session", "model.ae_project.tier1_raw__user_conversion_organic_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_gid", "file_key_name": "models.tier1_raw__user_conversion_organic_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_organic_live_session"}, "test.ae_project.unique_tier1_raw__user_conversion_without_live_session_user_gid.81ecc40b0f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_without_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_conversion_without_live_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_conversion_without_live_session_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_conversion_without_live_session_user_gid.81ecc40b0f", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_conversion_without_live_session_user_gid"], "alias": "unique_tier1_raw__user_conversion_without_live_session_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.5227368, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_without_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user_conversion_without_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_without_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_without_live_session"}, "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_gid.58a9a2bbce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_without_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_without_live_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conve_c8cd5ddc06c63b2c9504438817ff57bb.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_gid.58a9a2bbce", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_without_live_session_user_gid"], "alias": "not_null_tier1_raw__user_conve_c8cd5ddc06c63b2c9504438817ff57bb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier1_raw__user_conve_c8cd5ddc06c63b2c9504438817ff57bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier1_raw__user_conve_c8cd5ddc06c63b2c9504438817ff57bb"}, "created_at": 1694360092.525007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier1_raw__user_conve_c8cd5ddc06c63b2c9504438817ff57bb\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_without_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion_without_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_without_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_without_live_session"}, "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.bd493a33cd": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user_conversion')", "field": "user_gid", "column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_without_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__d31582689c050725fe802e56a382449e.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.bd493a33cd", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_"], "alias": "relationships_tier1_raw__user__d31582689c050725fe802e56a382449e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__d31582689c050725fe802e56a382449e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__d31582689c050725fe802e56a382449e"}, "created_at": 1694360092.5273325, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__d31582689c050725fe802e56a382449e\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_without_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_without_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_without_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_without_live_session"}, "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid.b55d9c9ab9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_conversion_channel_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_without_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conve_7ace8ce79e61479011f232fe94a7bcaa.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid.b55d9c9ab9", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid"], "alias": "not_null_tier1_raw__user_conve_7ace8ce79e61479011f232fe94a7bcaa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier1_raw__user_conve_7ace8ce79e61479011f232fe94a7bcaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier1_raw__user_conve_7ace8ce79e61479011f232fe94a7bcaa"}, "created_at": 1694360092.5338566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier1_raw__user_conve_7ace8ce79e61479011f232fe94a7bcaa\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_without_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion_without_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_channel_gid", "file_key_name": "models.tier1_raw__user_conversion_without_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_without_live_session"}, "test.ae_project.unique_tier1_raw__user_conversion_paid_live_session_user_gid.d6fe3415dd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_paid_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_conversion_paid_live_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_conversion_paid_live_session_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_conversion_paid_live_session_user_gid.d6fe3415dd", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_conversion_paid_live_session_user_gid"], "alias": "unique_tier1_raw__user_conversion_paid_live_session_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.5426161, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user_conversion_paid_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_paid_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_paid_live_session"}, "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_gid.d7d04b67a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_paid_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_paid_live_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conversion_paid_live_session_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_gid.d7d04b67a7", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_paid_live_session_user_gid"], "alias": "not_null_tier1_raw__user_conversion_paid_live_session_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.5449057, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion_paid_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_paid_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_paid_live_session"}, "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.b8ce42ba6a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user_conversion')", "field": "user_gid", "column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_paid_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__eeb38e94e9fdd0d1d46955ee0b64080c.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.b8ce42ba6a", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_"], "alias": "relationships_tier1_raw__user__eeb38e94e9fdd0d1d46955ee0b64080c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__eeb38e94e9fdd0d1d46955ee0b64080c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__eeb38e94e9fdd0d1d46955ee0b64080c"}, "created_at": 1694360092.5474675, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__eeb38e94e9fdd0d1d46955ee0b64080c\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_paid_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_conversion_paid_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_paid_live_session"}, "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid.bfea4a89a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_session_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_paid_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_conve_bbd51b07fac024f2473d293c4f7e9d7c.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid.bfea4a89a2", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid"], "alias": "not_null_tier1_raw__user_conve_bbd51b07fac024f2473d293c4f7e9d7c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_tier1_raw__user_conve_bbd51b07fac024f2473d293c4f7e9d7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tier1_raw__user_conve_bbd51b07fac024f2473d293c4f7e9d7c"}, "created_at": 1694360092.5543709, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tier1_raw__user_conve_bbd51b07fac024f2473d293c4f7e9d7c\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_conversion_paid_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_gid", "file_key_name": "models.tier1_raw__user_conversion_paid_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_paid_live_session"}, "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.3be753c470": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user_session')", "field": "user_session_gid", "column_name": "user_session_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_paid_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__17b1a4a4fa818f952bc4f35fd9220217.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.3be753c470", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_"], "alias": "relationships_tier1_raw__user__17b1a4a4fa818f952bc4f35fd9220217", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__17b1a4a4fa818f952bc4f35fd9220217", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__17b1a4a4fa818f952bc4f35fd9220217"}, "created_at": 1694360092.5567033, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__17b1a4a4fa818f952bc4f35fd9220217\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_paid_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_session", "model.ae_project.tier1_raw__user_conversion_paid_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_gid", "file_key_name": "models.tier1_raw__user_conversion_paid_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_paid_live_session"}, "test.ae_project.unique_tier1_raw__channel_channel_gid.4a24a5e80b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "channel_gid", "model": "{{ get_where_subquery(ref('tier1_raw__channel')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__channel_channel_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__channel_channel_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__channel_channel_gid.4a24a5e80b", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__channel_channel_gid"], "alias": "unique_tier1_raw__channel_channel_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.590077, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "channel_gid", "file_key_name": "models.tier1_raw__channel", "attached_node": "model.ae_project.tier1_raw__channel"}, "test.ae_project.not_null_tier1_raw__channel_channel_gid.c57ac23c8c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_gid", "model": "{{ get_where_subquery(ref('tier1_raw__channel')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__channel_channel_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__channel_channel_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__channel_channel_gid.c57ac23c8c", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__channel_channel_gid"], "alias": "not_null_tier1_raw__channel_channel_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.5923574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "channel_gid", "file_key_name": "models.tier1_raw__channel", "attached_node": "model.ae_project.tier1_raw__channel"}, "test.ae_project.unique_tier1_raw__channel_channel_name.32af038f4d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "channel_name", "model": "{{ get_where_subquery(ref('tier1_raw__channel')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__channel_channel_name", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__channel_channel_name.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__channel_channel_name.32af038f4d", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__channel_channel_name"], "alias": "unique_tier1_raw__channel_channel_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.594681, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "channel_name", "file_key_name": "models.tier1_raw__channel", "attached_node": "model.ae_project.tier1_raw__channel"}, "test.ae_project.not_null_tier1_raw__channel_channel_name.adce960d3a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_name", "model": "{{ get_where_subquery(ref('tier1_raw__channel')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__channel_channel_name", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__channel_channel_name.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__channel_channel_name.adce960d3a", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__channel_channel_name"], "alias": "not_null_tier1_raw__channel_channel_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.596956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "channel_name", "file_key_name": "models.tier1_raw__channel", "attached_node": "model.ae_project.tier1_raw__channel"}, "test.ae_project.not_null_stg_sources__sessions_user_id.83b167125e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_sources__sessions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_stg_sources__sessions_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_stg_sources__sessions_user_id.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.not_null_stg_sources__sessions_user_id.83b167125e", "fqn": ["ae_project", "staging", "not_null_stg_sources__sessions_user_id"], "alias": "not_null_stg_sources__sessions_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6093447, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.stg_sources__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_sources__sessions", "attached_node": "model.ae_project.stg_sources__sessions"}, "test.ae_project.not_null_stg_sources__sessions_time_started.8e3d128f69": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_started", "model": "{{ get_where_subquery(ref('stg_sources__sessions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_stg_sources__sessions_time_started", "resource_type": "test", "package_name": "ae_project", "path": "not_null_stg_sources__sessions_time_started.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.not_null_stg_sources__sessions_time_started.8e3d128f69", "fqn": ["ae_project", "staging", "not_null_stg_sources__sessions_time_started"], "alias": "not_null_stg_sources__sessions_time_started", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6116889, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.stg_sources__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "time_started", "file_key_name": "models.stg_sources__sessions", "attached_node": "model.ae_project.stg_sources__sessions"}, "test.ae_project.not_null_stg_sources__sessions_is_paid.cd2dc533ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_paid", "model": "{{ get_where_subquery(ref('stg_sources__sessions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_stg_sources__sessions_is_paid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_stg_sources__sessions_is_paid.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.not_null_stg_sources__sessions_is_paid.cd2dc533ab", "fqn": ["ae_project", "staging", "not_null_stg_sources__sessions_is_paid"], "alias": "not_null_stg_sources__sessions_is_paid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6143053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.stg_sources__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "is_paid", "file_key_name": "models.stg_sources__sessions", "attached_node": "model.ae_project.stg_sources__sessions"}, "test.ae_project.not_null_stg_sources__sessions_medium.4692625f3f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "medium", "model": "{{ get_where_subquery(ref('stg_sources__sessions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_stg_sources__sessions_medium", "resource_type": "test", "package_name": "ae_project", "path": "not_null_stg_sources__sessions_medium.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.not_null_stg_sources__sessions_medium.4692625f3f", "fqn": ["ae_project", "staging", "not_null_stg_sources__sessions_medium"], "alias": "not_null_stg_sources__sessions_medium", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6165955, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.stg_sources__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "medium", "file_key_name": "models.stg_sources__sessions", "attached_node": "model.ae_project.stg_sources__sessions"}, "test.ae_project.unique_stg_sources__sessions__user_id_time_started_.121d94c185": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(user_id || '-' || time_started)", "model": "{{ get_where_subquery(ref('stg_sources__sessions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_stg_sources__sessions__user_id_time_started_", "resource_type": "test", "package_name": "ae_project", "path": "unique_stg_sources__sessions__user_id_time_started_.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.unique_stg_sources__sessions__user_id_time_started_.121d94c185", "fqn": ["ae_project", "staging", "unique_stg_sources__sessions__user_id_time_started_"], "alias": "unique_stg_sources__sessions__user_id_time_started_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6189466, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.stg_sources__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_sources__sessions", "attached_node": "model.ae_project.stg_sources__sessions"}, "test.ae_project.unique_stg_sources__conversions_user_id.c32955bc24": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_sources__conversions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_stg_sources__conversions_user_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_stg_sources__conversions_user_id.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.unique_stg_sources__conversions_user_id.c32955bc24", "fqn": ["ae_project", "staging", "unique_stg_sources__conversions_user_id"], "alias": "unique_stg_sources__conversions_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6212542, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__conversions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.stg_sources__conversions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_sources__conversions", "attached_node": "model.ae_project.stg_sources__conversions"}, "test.ae_project.not_null_stg_sources__conversions_user_id.25e291f337": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_sources__conversions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_stg_sources__conversions_user_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_stg_sources__conversions_user_id.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.not_null_stg_sources__conversions_user_id.25e291f337", "fqn": ["ae_project", "staging", "not_null_stg_sources__conversions_user_id"], "alias": "not_null_stg_sources__conversions_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.623856, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__conversions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.stg_sources__conversions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.stg_sources__conversions", "attached_node": "model.ae_project.stg_sources__conversions"}, "test.ae_project.not_null_stg_sources__conversions_registration_time.3ecadfc2e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "registration_time", "model": "{{ get_where_subquery(ref('stg_sources__conversions')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_stg_sources__conversions_registration_time", "resource_type": "test", "package_name": "ae_project", "path": "not_null_stg_sources__conversions_registration_time.sql", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "test.ae_project.not_null_stg_sources__conversions_registration_time.3ecadfc2e6", "fqn": ["ae_project", "staging", "not_null_stg_sources__conversions_registration_time"], "alias": "not_null_stg_sources__conversions_registration_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.626247, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_sources__conversions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.stg_sources__conversions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "registration_time", "file_key_name": "models.stg_sources__conversions", "attached_node": "model.ae_project.stg_sources__conversions"}, "test.ae_project.unique_channel_seed_channel_name.3e8802fa41": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "channel_name", "model": "{{ get_where_subquery(ref('channel_seed')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_channel_seed_channel_name", "resource_type": "test", "package_name": "ae_project", "path": "unique_channel_seed_channel_name.sql", "original_file_path": "seeds/schema.yml", "unique_id": "test.ae_project.unique_channel_seed_channel_name.3e8802fa41", "fqn": ["ae_project", "unique_channel_seed_channel_name"], "alias": "unique_channel_seed_channel_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6472125, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "channel_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.ae_project.channel_seed"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "channel_name", "file_key_name": "seeds.channel_seed", "attached_node": "seed.ae_project.channel_seed"}, "test.ae_project.not_null_channel_seed_channel_name.0551e3fda5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_name", "model": "{{ get_where_subquery(ref('channel_seed')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_channel_seed_channel_name", "resource_type": "test", "package_name": "ae_project", "path": "not_null_channel_seed_channel_name.sql", "original_file_path": "seeds/schema.yml", "unique_id": "test.ae_project.not_null_channel_seed_channel_name.0551e3fda5", "fqn": ["ae_project", "not_null_channel_seed_channel_name"], "alias": "not_null_channel_seed_channel_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360092.6495492, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "channel_seed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.ae_project.channel_seed"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "channel_name", "file_key_name": "seeds.channel_seed", "attached_node": "seed.ae_project.channel_seed"}, "model.ae_project.tier1_raw__user_session": {"database": "analytics-engineering-398318", "schema": "ae_tier1_raw", "name": "tier1_raw__user_session", "resource_type": "model", "package_name": "ae_project", "path": "tier1_raw/tier1_raw__user_session.sql", "original_file_path": "models/tier1_raw/tier1_raw__user_session.sql", "unique_id": "model.ae_project.tier1_raw__user_session", "fqn": ["ae_project", "tier1_raw", "tier1_raw__user_session"], "alias": "user_session", "checksum": {"name": "sha256", "checksum": "c6af3e7cd2efe66f0a44d2fa81700b18ee7b8d596abdde3bee24f7ea5edbe6ed"}, "config": {"enabled": true, "alias": "user_session", "schema": "tier1_raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "User Session contains the Users and their details which initiated a session on the website. There are some business rules applied for this channel grouping. To achieve this, channel_seed data is used as a base. And then, this channel seed is linked to sessions, to group them according to the rules:\r\n\r\n    **(1.1) Channel Paid Click:** If a session is initiated by a paid (is_paid=True) search medium (medium='PAID SEARCH'). \r\n    This channel is a Prio-1 channel with a lifespan of 3 hours, which means that if a conversion happened within a 3-hour timeframe after a Paid Click, then the session is the winner.\r\n\r\n    **(1.2) Channel Paid Impression:** If a session is initiated by a paid (is_paid=True) social or display medium (medium in ('PAID SOCIAL', 'DISPLAY')). \r\n    This channel is a Prio-1 channel with a lifespan of 1 hours, which means that if a conversion happened within a 1-hour timeframe after a Paid Impression, then the session is the winner.\r\n\r\n    >> NOTE: Paid Impression and Paid Social channels have the same priority, so the first session in timespan is the winner for conversion.\r\n\r\n    **(2) Channel Organic Click:** If a session is initiated by a non-paid (is_paid=False) organic search medium (medium = 'ORGANIC SEARCH'). \r\n    This channel is a Prio-2 channel with a lifespan of 12 hours, which means that if a conversion happened within a 12-hour timeframe after an Organic Click, and if no Prio-1 wins happened during this timeframe (as they have the ability to hijack), then the session is the winner.\r\n\r\n    **(3) Channel Direct:** If a session is not initiated by a Paid or Organic (Prio 1 or 2) session, but a non-paid (is_paid=False) direct medium (medium = 'DIRECT'). This channel is Prio-3.\r\n\r\n    **(4) Channel Other:** If a session is not initiated by any of the channels above. This channel is Prio-4. It can be either initiated by a session, or not. You can discriminate this by user_conversion.user_conversion_via_session_indicator.", "columns": {"user_session_gid": {"name": "user_session_gid", "description": "A User Session Gid is the generated surrogate key for a User Session. It's a composite key of User Gid and User Session Start Time.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_gid": {"name": "user_gid", "description": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_session_start_timestamp": {"name": "user_session_start_timestamp", "description": "A User Session Start Timestamp is the time when the session is started by the User.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "user_session_end_timestamp": {"name": "user_session_end_timestamp", "description": "A User Session End Timestamp is the time when the session is considered as ended (if applicable).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_session_channel_gid": {"name": "user_session_channel_gid", "description": "A User Session Channel Gid is the generated surrogate key for a Channel.", "meta": {}, "data_type": null, "constraints": [{"type": "foreign_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/tier1_raw/tier1_raw.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "tier1_raw", "alias": "user_session"}, "created_at": 1694360136.0931468, "relation_name": "`analytics-engineering-398318`.`ae_tier1_raw`.`user_session`", "raw_code": "{{ config(\r\n    schema='tier1_raw', \r\n    alias='user_session',\r\n    materialized='table') }}\r\n\r\nWITH session as (\r\n    select distinct * from {{ ref('stg_sources__sessions') }}\r\n),\r\n\r\nuser as(\r\n    select distinct * from {{ ref('tier1_raw__user') }}\r\n),\r\n\r\nchannel as (\r\n   select distinct * from {{ ref('tier1_raw__channel') }}\r\n),\r\n\r\nsession_curated AS (\r\n  SELECT DISTINCT\r\n    u.user_gid,\r\n    s.user_id,\r\n    s.time_started as user_session_start_timestamp,\r\n    s.is_paid,\r\n    s.medium,\r\n    CASE\r\n      WHEN s.is_paid = true and s.medium='PAID SEARCH' then '{{ var(\"paid_click\") }}'\r\n      WHEN s.is_paid = true and s.medium in ('PAID SOCIAL', 'DISPLAY') then '{{ var(\"paid_impression\") }}'\r\n      WHEN s.is_paid = false and s.medium='ORGANIC SEARCH' then  '{{ var(\"organic_click\") }}'\r\n      WHEN s.is_paid = false and s.medium='DIRECT' then  '{{ var(\"direct\") }}'\r\n      ELSE  '{{ var(\"other\") }}'\r\n    END as session_channel_name\r\n   from session s\r\n   inner join user u on s.user_id = u.user_id\r\n),\r\n\r\nsession_channel_curated as (\r\n    select * from session_curated cs\r\n    inner join channel c on cs.session_channel_name = c.channel_name\r\n),\r\n\r\nsession_final AS (\r\n    SELECT\r\n    sha256(concat(TO_BASE64(user_gid),cast(user_session_start_timestamp as string))) as user_session_gid,\r\n    user_gid,\r\n    user_session_start_timestamp,\r\n    CASE \r\n    WHEN session_channel_name = '{{ var(\"paid_click\") }}' THEN TIMESTAMP_ADD(user_session_start_timestamp, INTERVAL {{ \"session_channel_curated.channel_lifespan_duration\" }} HOUR)\r\n    WHEN session_channel_name = '{{ var(\"paid_impression\") }}' THEN TIMESTAMP_ADD(user_session_start_timestamp, INTERVAL {{ \"session_channel_curated.channel_lifespan_duration\" }} HOUR)\r\n    WHEN session_channel_name = '{{ var(\"organic_click\") }}' THEN TIMESTAMP_ADD(user_session_start_timestamp, INTERVAL {{ \"session_channel_curated.channel_lifespan_duration\" }} HOUR)\r\n    ELSE null END as user_session_end_timestamp,\r\n    channel_gid as user_session_channel_gid\r\n\r\n    from session_channel_curated)\r\n\r\nselect * from session_final", "language": "sql", "refs": [{"name": "stg_sources__sessions", "package": null, "version": null}, {"name": "tier1_raw__user", "package": null, "version": null}, {"name": "tier1_raw__channel", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__sessions", "model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__channel"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.ae_project.unique_tier1_raw__user_session_user_session_gid.943b1f6dc2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_session_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_session_user_session_gid", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_session_user_session_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_session_user_session_gid.943b1f6dc2", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_session_user_session_gid"], "alias": "unique_tier1_raw__user_session_user_session_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360136.1042316, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_gid", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.not_null_tier1_raw__user_session_user_session_gid.dbd4785125": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_session_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_session_user_session_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_session_user_session_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_session_user_session_gid.dbd4785125", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_session_user_session_gid"], "alias": "not_null_tier1_raw__user_session_user_session_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360136.1066809, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_gid", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.not_null_tier1_raw__user_session_user_gid.449b81636c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_session_user_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_session_user_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_session_user_gid.449b81636c", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_session_user_gid"], "alias": "not_null_tier1_raw__user_session_user_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360136.1091387, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_.1b59a59b86": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('tier1_raw__user')", "field": "user_gid", "column_name": "user_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__6702a12a7bfe18f3ec2c1f77c0e304bb.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_.1b59a59b86", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_"], "alias": "relationships_tier1_raw__user__6702a12a7bfe18f3ec2c1f77c0e304bb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_tier1_raw__user__6702a12a7bfe18f3ec2c1f77c0e304bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__6702a12a7bfe18f3ec2c1f77c0e304bb"}, "created_at": 1694360136.111482, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__6702a12a7bfe18f3ec2c1f77c0e304bb\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user", "package": null, "version": null}, {"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_gid", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.not_null_tier1_raw__user_session_user_session_start_timestamp.cdb7a1067c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_session_start_timestamp", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_session_user_session_start_timestamp", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_session_user_session_start_timestamp.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_session_user_session_start_timestamp.cdb7a1067c", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_session_user_session_start_timestamp"], "alias": "not_null_tier1_raw__user_session_user_session_start_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360136.124804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_start_timestamp", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.not_null_tier1_raw__user_session_user_session_channel_gid.3cc071dd6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_session_channel_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "not_null_tier1_raw__user_session_user_session_channel_gid", "resource_type": "test", "package_name": "ae_project", "path": "not_null_tier1_raw__user_session_user_session_channel_gid.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.not_null_tier1_raw__user_session_user_session_channel_gid.3cc071dd6f", "fqn": ["ae_project", "tier1_raw", "not_null_tier1_raw__user_session_user_session_channel_gid"], "alias": "not_null_tier1_raw__user_session_user_session_channel_gid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694360136.1271448, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_channel_gid", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_.7f1ba82847": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('channel')", "field": "channel_gid", "column_name": "user_session_channel_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__fb626dbebbc2120ddd9e773fff5ec60e.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_.7f1ba82847", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_"], "alias": "relationships_tier1_raw__user__fb626dbebbc2120ddd9e773fff5ec60e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_tier1_raw__user__fb626dbebbc2120ddd9e773fff5ec60e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__fb626dbebbc2120ddd9e773fff5ec60e"}, "created_at": 1694360136.1294713, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__fb626dbebbc2120ddd9e773fff5ec60e\") }}", "language": "sql", "refs": [{"name": "channel", "package": null, "version": null}, {"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_session_channel_gid", "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}, "test.ae_project.unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_.845aa6f3f3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(TO_BASE64(user_gid) || '-' || cast(user_session_start_timestamp as string))", "model": "{{ get_where_subquery(ref('tier1_raw__user_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_", "resource_type": "test", "package_name": "ae_project", "path": "unique_tier1_raw__user_session_de27810321ee666660040eecb478a9fa.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_.845aa6f3f3", "fqn": ["ae_project", "tier1_raw", "unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_"], "alias": "unique_tier1_raw__user_session_de27810321ee666660040eecb478a9fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_tier1_raw__user_session_de27810321ee666660040eecb478a9fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tier1_raw__user_session_de27810321ee666660040eecb478a9fa"}, "created_at": 1694360136.1363382, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tier1_raw__user_session_de27810321ee666660040eecb478a9fa\") }}", "language": "sql", "refs": [{"name": "tier1_raw__user_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ae_project.tier1_raw__user_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.tier1_raw__user_session", "attached_node": "model.ae_project.tier1_raw__user_session"}}, "sources": {"source.ae_project.sources.sessions": {"database": "analytics-engineering-398318", "schema": "ae_sources", "name": "sessions", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_sources.yml", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "source.ae_project.sources.sessions", "fqn": ["ae_project", "staging", "sources", "sessions"], "source_name": "sources", "source_description": "", "loader": "", "identifier": "sessions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sessions is a table of source data.  \r\n- The data has been downloaded from shared Google Drive folder and loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["session", "source"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-engineering-398318`.`ae_sources`.`sessions`", "created_at": 1694360092.6516101}, "source.ae_project.sources.conversions": {"database": "analytics-engineering-398318", "schema": "ae_sources", "name": "conversions", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_sources.yml", "original_file_path": "models/staging/stg_sources.yml", "unique_id": "source.ae_project.sources.conversions", "fqn": ["ae_project", "staging", "sources", "conversions"], "source_name": "sources", "source_description": "", "loader": "", "identifier": "conversions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Conversions is a table of source data.  \r\n- The data has been downloaded from shared Google Drive folder and loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["conversion", "source"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-engineering-398318`.`ae_sources`.`conversions`", "created_at": 1694360092.6518738}}, "macros": {"macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.1988451, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.1997771, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2006068, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2012086, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2896745, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2903314, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.291412, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2917538, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2922103, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.292571, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2929132, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2932708, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2936943, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.294352, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2947366, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2951207, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2960587, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2969337, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2985718, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2989795, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.2996202, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3057647, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.306418, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3068802, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3074846, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3087664, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3093383, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.30989, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3104196, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.31082, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3112903, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3116763, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3120954, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3122857, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3126159, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3128679, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3133717, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3137827, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.314654, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3158908, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3171191, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3175235, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3180299, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3187425, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3189993, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3206043, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3219218, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.322347, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3234334, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3238757, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.324263, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3253658, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3270178, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3274937, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3278692, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3286858, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3290524, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3293784, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3330834, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3338847, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3355427, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.336941, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3455477, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.35175, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3523686, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3548872, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3556252, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3559985, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.357594, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.358604, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3609416, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.361852, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3624532, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3639002, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3646896, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3665736, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3711596, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3738203, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3750515, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3772209, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3786643, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3810792, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3816457, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3822012, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3828828, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.383606, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3847923, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3872857, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3878999, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3883424, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3887208, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3891432, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3897161, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3901865, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3909252, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.39137, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3917735, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3926454, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3935754, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3951995, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3963933, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.396823, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3970788, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3974807, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3977315, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.398129, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3984036, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3993306, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.3996952, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4000354, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4002917, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4006739, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4008627, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.401243, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.401629, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4059443, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4063635, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.406871, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.40753, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4080832, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.408813, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4092433, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4096346, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4102802, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4109452, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4115198, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4127338, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4132597, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4136457, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4141207, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4169981, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4172857, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4177084, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4179835, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4187942, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.419234, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4194999, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.420017, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4204621, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.420979, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4214106, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.421931, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4234324, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4240177, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4245994, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4251187, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4276292, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.428902, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.429302, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4297671, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.430162, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4307902, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4318619, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4326477, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4330857, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.433462, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4338896, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4374843, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.437859, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4386485, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4391692, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4396613, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4400876, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4419549, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4427633, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.443191, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4439757, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.444494, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4458046, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4464087, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4481492, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.448802, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4493258, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4508476, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4511774, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.451559, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4524462, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4528804, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4532027, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.453569, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4538672, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4547045, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4552958, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4563239, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4569411, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4575934, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.45847, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4595106, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4624686, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4637656, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.46444, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4674778, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4700367, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4717164, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.472259, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.472981, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.473369, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4739733, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4743118, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4749281, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.475248, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4758165, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4760737, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4766214, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4768784, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4776134, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4782145, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4786003, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4791195, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4793308, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4800422, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4803486, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4810488, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4814346, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4820724, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.48244, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.483003, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.483259, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4838872, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4842029, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4847457, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4851184, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4864762, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.487397, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.488413, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4888105, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4893143, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4900293, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4904437, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4910223, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.491411, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4920192, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4923575, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4932745, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4935713, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4944036, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4949665, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4954946, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4956923, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4963255, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4966495, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4972796, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4976137, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4994137, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.4997904, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5001674, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.500521, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5008936, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.501246, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.501619, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.502029, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5024297, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5027916, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5031695, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5035245, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5040412, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5043943, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5066128, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5070777, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.50742, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5077703, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5081077, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5088694, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5095594, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5102649, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5120578, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5123513, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5135086, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.513903, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5142205, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5170395, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5180554, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5188513, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5204523, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5208776, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.521826, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5233045, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.524347, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.524788, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5252094, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.530846, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5337539, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5350118, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.536487, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5370302, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5386307, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.539974, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5498664, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.559202, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5627358, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5633278, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5655437, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5661485, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.567618, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5761685, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5788126, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5815547, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5834482, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5851128, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5856485, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.586079, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5867608, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5871959, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5878596, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.58829, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5888755, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5893068, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.589663, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.5903032, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.595921, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.599364, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.600044, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.600555, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6014853, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6018703, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.602321, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6032825, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6039803, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6042995, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.605179, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6055784, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6141784, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6150944, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6156754, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6187475, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.619284, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6207242, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6214626, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.621797, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6227984, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.623229, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6241167, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6244667, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.624989, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6252697, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6319308, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.632623, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6329503, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6405675, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6425462, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6430755, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6441498, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.644612, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6449342, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6452606, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6455464, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6459155, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6461933, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.647413, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6478605, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6505103, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.656722, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6674378, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6683254, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.668922, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.674788, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6754394, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6758277, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6760473, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6763837, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6766634, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6771219, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.679011, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.679462, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6800563, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6809971, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6871223, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6875336, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6880598, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6897206, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6901126, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.690533, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.693507, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6962898, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6970644, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.697904, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6987922, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.6994853, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7035599, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7062044, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7066047, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7083597, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.709265, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7105505, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7115958, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7117863, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.712802, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7133362, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7140303, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694292734.7146795, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.ae_project.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "ae_project", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.ae_project.__overview__", "block_contents": "# Welcome to the User Data Model of AE\r\nThis project includes a set of models to create the User data model.\r\n\r\nA three-tier data model is designed with following specifications to host the User data:\r\n\r\n>*(Note: On top of tier1, we also have the sources/seeds and staging models staging models which has 1-1 relationship to the source data.)*\r\n- **Tier1 (Raw/Standardized Data Layer):** This tier includes a standardized/normalized relational data model, which contains the source attributes.\r\n- **Tier2 (Integrated/Curated Layer):** This tier creates consumable data sets according to the business rules and definitions. Any calculation or pivoting can also be done on this layer, up to the curation is finalized, supporting entities can also be included.\r\n- **Tier3 (Ready for Reporting/Consumption Layer):** This layer is the final layer of the model, which contains the production quality data and ready to be sent/connected to the target application.\r\n\r\n#### To reproduce the results via a different dataset:\r\nPlease change the \"sources\" configuration in [*models/staging/stg_sources.yml*](https://github.com/aalyanak/dbt-cloud-ae-repository/blob/main/models/staging/stg_sources.yml)  file.\r\n\r\n```\r\nsources:\r\n  - name: sources\r\n    database: analytics-engineering-398318\r\n    schema: ae_sources\r\ntables:\r\n      - name: sessions\r\n.\r\n.\r\n      - name: conversions\r\n```\r\n\r\n#### The locations of DRY (don't repeat yourself) code source files:\r\n- In [*dbt_project.yml*](https://github.com/aalyanak/dbt-cloud-ae-repository/blob/main/dbt_project.yml) file, you can find the variables used in models.\r\n- In [*models/shared_definitions.md*](https://github.com/aalyanak/dbt-cloud-ae-repository/blob/main/models/shared_definitions.md) file, you can find the code blocks of shared definitions used in yml files.\r\n\r\nTry running the following commands:\r\n- **dbt build** (or dbt seed + dbt test + dbt run) to regenerate the entire model\r\n- **dbt docs generate** to regenerate the documentation\r\n\r\n### Resources:\r\n- GitHub link of this repository: [click](https://github.com/aalyanak/dbt-cloud-ae-repository/tree/main)\r\n- Check out the ERD diagrams of the data model: [click](https://miro.com/app/board/uXjVMnUZ8Nk=/?share_link_id=331262939098)\r\n- Check out the DBT docs: [click](https://aalyanak.github.io/dbt-cloud-ae-repository/#!/overview) for extensive information of each tables and columns\r\n- The linked data lake: [click](https://console.cloud.google.com/bigquery?project=analytics-engineering-398318)\r\n- And lastly, check an example report which is created on tier3 data: [click](https://lookerstudio.google.com/u/0/reporting/e3a2ff77-80b8-4254-ba4a-9e105acccd13/page/hm9bD)"}, "doc.ae_project.def_source_data": {"name": "def_source_data", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_source_data", "block_contents": "is a table of source data.  \r\n- The data has been downloaded from shared Google Drive folder and loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly."}, "doc.ae_project.def_staging_entity": {"name": "def_staging_entity", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_staging_entity", "block_contents": "is a staging entity for multiple use of the data source"}, "doc.ae_project.def_ent_user": {"name": "def_ent_user", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_user", "block_contents": "A User is a name given to an individual who interacts with the website, either converted (signed up) or as a guest. For now, we only have converted users, but the model is extendable to the guest users in the future."}, "doc.ae_project.def_ent_conversion": {"name": "def_ent_conversion", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_conversion", "block_contents": "contains the users who are converted (signed up) to the website"}, "doc.ae_project.def_ent_session": {"name": "def_ent_session", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_session", "block_contents": "contains the Users and their details which initiated a session on the website."}, "doc.ae_project.def_ent_channel": {"name": "def_ent_channel", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_channel", "block_contents": "is a collection of conversion channel names, their prioritization in conversation strategy and lifespan of channels (if applicable)."}, "doc.ae_project.def_att_user_gid": {"name": "def_att_user_gid", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_user_gid", "block_contents": "A User Gid is the generated surrogate key for a User. It's a composite key of User Id and User Conversion Indicator."}, "doc.ae_project.def_att_user_id": {"name": "def_att_user_id", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_user_id", "block_contents": "A User Id is the unique identifier of a User."}, "doc.ae_project.def_att_user_conversion_ind": {"name": "def_att_user_conversion_ind", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_user_conversion_ind", "block_contents": "A User Conversion Indicator indicates whether or not a User is converted (signed up)."}, "doc.ae_project.def_att_conversion_time": {"name": "def_att_conversion_time", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_conversion_time", "block_contents": "is the time when the conversion is happened."}, "doc.ae_project.def_att_conversion_channel": {"name": "def_att_conversion_channel", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_conversion_channel", "block_contents": "is the name of the channel which is the winner for the conversion."}, "doc.ae_project.user_conversion_via_session_ind": {"name": "user_conversion_via_session_ind", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.user_conversion_via_session_ind", "block_contents": "User Conversion via Session indicator indicates whether or not a User is conversion is initiated by a session (live or non-live)."}, "doc.ae_project.def_att_user_session_gid": {"name": "def_att_user_session_gid", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_user_session_gid", "block_contents": "A User Session Gid is the generated surrogate key for a User Session. It's a composite key of User Gid and User Session Start Time."}, "doc.ae_project.def_att_session_start_time": {"name": "def_att_session_start_time", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_session_start_time", "block_contents": "is the time when the session is started by the User."}, "doc.ae_project.def_att_session_end_time": {"name": "def_att_session_end_time", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_session_end_time", "block_contents": "is the time when the session is considered as ended (if applicable)."}, "doc.ae_project.def_att_session_channel": {"name": "def_att_session_channel", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_session_channel", "block_contents": "is the name of the channel which initiated the session."}, "doc.ae_project.def_att_channel_gid": {"name": "def_att_channel_gid", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_channel_gid", "block_contents": "Channel Gid is the generated surrogate key for a Channel."}, "doc.ae_project.def_att_channel_name": {"name": "def_att_channel_name", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_channel_name", "block_contents": "Channel Name is the name of the channel."}, "doc.ae_project.def_udp_channel_prio": {"name": "def_udp_channel_prio", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_udp_channel_prio", "block_contents": "An ascending number of the priority order (from highest to lowest) of the channel, according to the business logic:\r\n    * The paid channels (click or impression) have the highest priority (1), as they also have ability of hijacking.\r\n    * The organic clicks has the second order of priority (2).\r\n    * Direct channel has the third order of priority (3).\r\n    * Other mediums have the last (4)."}, "doc.ae_project.def_udp_channel_classification": {"name": "def_udp_channel_classification", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_udp_channel_classification", "block_contents": "There are some business rules applied for this channel grouping. To achieve this, channel_seed data is used as a base. And then, this channel seed is linked to sessions, to group them according to the rules:\r\n\r\n    **(1.1) Channel Paid Click:** If a session is initiated by a paid (is_paid=True) search medium (medium='PAID SEARCH'). \r\n    This channel is a Prio-1 channel with a lifespan of 3 hours, which means that if a conversion happened within a 3-hour timeframe after a Paid Click, then the session is the winner.\r\n\r\n    **(1.2) Channel Paid Impression:** If a session is initiated by a paid (is_paid=True) social or display medium (medium in ('PAID SOCIAL', 'DISPLAY')). \r\n    This channel is a Prio-1 channel with a lifespan of 1 hours, which means that if a conversion happened within a 1-hour timeframe after a Paid Impression, then the session is the winner.\r\n\r\n    >> NOTE: Paid Impression and Paid Social channels have the same priority, so the first session in timespan is the winner for conversion.\r\n\r\n    **(2) Channel Organic Click:** If a session is initiated by a non-paid (is_paid=False) organic search medium (medium = 'ORGANIC SEARCH'). \r\n    This channel is a Prio-2 channel with a lifespan of 12 hours, which means that if a conversion happened within a 12-hour timeframe after an Organic Click, and if no Prio-1 wins happened during this timeframe (as they have the ability to hijack), then the session is the winner.\r\n\r\n    **(3) Channel Direct:** If a session is not initiated by a Paid or Organic (Prio 1 or 2) session, but a non-paid (is_paid=False) direct medium (medium = 'DIRECT'). This channel is Prio-3.\r\n\r\n    **(4) Channel Other:** If a session is not initiated by any of the channels above. This channel is Prio-4. It can be either initiated by a session, or not. You can discriminate this by user_conversion.user_conversion_via_session_indicator."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid__channel_gid__ref_channel_.7f3af7210d": [{"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('channel')", "field": "channel_gid", "column_name": "user_conversion_channel_gid", "model": "{{ get_where_subquery(ref('tier1_raw__user_conversion_without_live_session')) }}"}, "namespace": null}, "database": "analytics-engineering-398318", "schema": "ae_dbt_test__audit", "name": "relationships_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid__channel_gid__ref_channel_", "resource_type": "test", "package_name": "ae_project", "path": "relationships_tier1_raw__user__2ca0e4f704c6537f1b80421556b1e570.sql", "original_file_path": "models/tier1_raw/tier1_raw.yml", "unique_id": "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid__channel_gid__ref_channel_.7f3af7210d", "fqn": ["ae_project", "tier1_raw", "relationships_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid__channel_gid__ref_channel_"], "alias": "relationships_tier1_raw__user__2ca0e4f704c6537f1b80421556b1e570", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_tier1_raw__user__2ca0e4f704c6537f1b80421556b1e570", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_tier1_raw__user__2ca0e4f704c6537f1b80421556b1e570"}, "created_at": 1694360092.536164, "config_call_dict": {"alias": "relationships_tier1_raw__user__2ca0e4f704c6537f1b80421556b1e570"}, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_tier1_raw__user__2ca0e4f704c6537f1b80421556b1e570\") }}", "language": "sql", "refs": [{"name": "channel", "package": null, "version": null}, {"name": "tier1_raw__user_conversion_without_live_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.tier1_raw__user_conversion_without_live_session"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_conversion_channel_gid", "file_key_name": "models.tier1_raw__user_conversion_without_live_session", "attached_node": "model.ae_project.tier1_raw__user_conversion_without_live_session"}]}, "parent_map": {"model.ae_project.tier3_consumption__user": ["model.ae_project.tier2_curated__user"], "model.ae_project.tier3_consumption__user_conversion": ["model.ae_project.tier2_curated__user_conversion"], "model.ae_project.tier2_curated__user": ["model.ae_project.tier1_raw__user"], "model.ae_project.tier2_curated__user_conversion": ["model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_conversion_without_live_session", "model.ae_project.tier1_raw__user_session"], "model.ae_project.tier1_raw__user_conversion_without_live_session": ["model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_session"], "model.ae_project.tier1_raw__user_conversion_organic_live_session": ["model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_session"], "model.ae_project.tier1_raw__user_conversion_paid_live_session": ["model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_session"], "model.ae_project.tier1_raw__user_conversion": ["model.ae_project.stg_sources__conversions", "model.ae_project.tier1_raw__user"], "model.ae_project.tier1_raw__user": ["model.ae_project.stg_sources__conversions", "model.ae_project.stg_sources__sessions"], "model.ae_project.stg_sources__sessions": ["source.ae_project.sources.sessions"], "model.ae_project.tier1_raw__channel": ["seed.ae_project.channel_seed"], "model.ae_project.stg_sources__conversions": ["source.ae_project.sources.conversions"], "seed.ae_project.channel_seed": [], "test.ae_project.not_null_tier3_consumption__user_user_id.1e70746daf": ["model.ae_project.tier3_consumption__user"], "test.ae_project.not_null_tier3_consumption__user_user_conversion_indicator.b1ed0e4066": ["model.ae_project.tier3_consumption__user"], "test.ae_project.accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False.9109775d10": ["model.ae_project.tier3_consumption__user"], "test.ae_project.unique_tier3_consumption__user__user_id_user_conversion_indicator_.72b8da2232": ["model.ae_project.tier3_consumption__user"], "test.ae_project.not_null_tier3_consumption__user_conversion_user_id.707d65f0dd": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_indicator.9cfb6bf655": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False.1e77c378d5": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_channel_name.45eb9f2303": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.9c0f9dbdc1": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_timestamp.e67f2f2d0c": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator.860cf0dcc9": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False.91be351bfb": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_.564363f97f": ["model.ae_project.tier3_consumption__user_conversion"], "test.ae_project.not_null_tier2_curated__user_user_id.1a6cc8ec63": ["model.ae_project.tier2_curated__user"], "test.ae_project.not_null_tier2_curated__user_user_conversion_indicator.c2c47d8d21": ["model.ae_project.tier2_curated__user"], "test.ae_project.accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False.9094d41297": ["model.ae_project.tier2_curated__user"], "test.ae_project.unique_tier2_curated__user__user_id_user_conversion_indicator_.e2b6afca5f": ["model.ae_project.tier2_curated__user"], "test.ae_project.not_null_tier2_curated__user_conversion_user_id.ec7b75f850": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_indicator.65d12ab355": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False.6cd53f27ba": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_channel_name.6dc8378df0": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.fe4e47b1ee": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_timestamp.e4fc81b9db": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator.128a877f18": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False.50209a829c": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_.766910495e": ["model.ae_project.tier2_curated__user_conversion"], "test.ae_project.unique_tier1_raw__user_user_gid.fb11ca5714": ["model.ae_project.tier1_raw__user"], "test.ae_project.not_null_tier1_raw__user_user_gid.35f9954c17": ["model.ae_project.tier1_raw__user"], "test.ae_project.not_null_tier1_raw__user_user_id.d930db0ef0": ["model.ae_project.tier1_raw__user"], "test.ae_project.not_null_tier1_raw__user_user_conversion_indicator.0bdfebbec3": ["model.ae_project.tier1_raw__user"], "test.ae_project.accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False.b395d5765f": ["model.ae_project.tier1_raw__user"], "test.ae_project.unique_tier1_raw__user__user_id_user_conversion_indicator_.4150292f96": ["model.ae_project.tier1_raw__user"], "test.ae_project.unique_tier1_raw__user_conversion_user_gid.a3f8810911": ["model.ae_project.tier1_raw__user_conversion"], "test.ae_project.not_null_tier1_raw__user_conversion_user_gid.6da6ddc3b8": ["model.ae_project.tier1_raw__user_conversion"], "test.ae_project.relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_.c1754ec569": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_conversion"], "test.ae_project.not_null_tier1_raw__user_conversion_user_conversion_timestamp.3e7f9cc89e": ["model.ae_project.tier1_raw__user_conversion"], "test.ae_project.unique_tier1_raw__user_conversion_organic_live_session_user_gid.1634aab819": ["model.ae_project.tier1_raw__user_conversion_organic_live_session"], "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_gid.a3244e8642": ["model.ae_project.tier1_raw__user_conversion_organic_live_session"], "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.a5c96ea83c": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_organic_live_session"], "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid.a924e9a968": ["model.ae_project.tier1_raw__user_conversion_organic_live_session"], "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.8c36a1b800": ["model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_session"], "test.ae_project.unique_tier1_raw__user_conversion_without_live_session_user_gid.81ecc40b0f": ["model.ae_project.tier1_raw__user_conversion_without_live_session"], "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_gid.58a9a2bbce": ["model.ae_project.tier1_raw__user_conversion_without_live_session"], "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.bd493a33cd": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_without_live_session"], "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid.b55d9c9ab9": ["model.ae_project.tier1_raw__user_conversion_without_live_session"], "test.ae_project.unique_tier1_raw__user_conversion_paid_live_session_user_gid.d6fe3415dd": ["model.ae_project.tier1_raw__user_conversion_paid_live_session"], "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_gid.d7d04b67a7": ["model.ae_project.tier1_raw__user_conversion_paid_live_session"], "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.b8ce42ba6a": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_conversion_paid_live_session"], "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid.bfea4a89a2": ["model.ae_project.tier1_raw__user_conversion_paid_live_session"], "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.3be753c470": ["model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_session"], "test.ae_project.unique_tier1_raw__channel_channel_gid.4a24a5e80b": ["model.ae_project.tier1_raw__channel"], "test.ae_project.not_null_tier1_raw__channel_channel_gid.c57ac23c8c": ["model.ae_project.tier1_raw__channel"], "test.ae_project.unique_tier1_raw__channel_channel_name.32af038f4d": ["model.ae_project.tier1_raw__channel"], "test.ae_project.not_null_tier1_raw__channel_channel_name.adce960d3a": ["model.ae_project.tier1_raw__channel"], "test.ae_project.not_null_stg_sources__sessions_user_id.83b167125e": ["model.ae_project.stg_sources__sessions"], "test.ae_project.not_null_stg_sources__sessions_time_started.8e3d128f69": ["model.ae_project.stg_sources__sessions"], "test.ae_project.not_null_stg_sources__sessions_is_paid.cd2dc533ab": ["model.ae_project.stg_sources__sessions"], "test.ae_project.not_null_stg_sources__sessions_medium.4692625f3f": ["model.ae_project.stg_sources__sessions"], "test.ae_project.unique_stg_sources__sessions__user_id_time_started_.121d94c185": ["model.ae_project.stg_sources__sessions"], "test.ae_project.unique_stg_sources__conversions_user_id.c32955bc24": ["model.ae_project.stg_sources__conversions"], "test.ae_project.not_null_stg_sources__conversions_user_id.25e291f337": ["model.ae_project.stg_sources__conversions"], "test.ae_project.not_null_stg_sources__conversions_registration_time.3ecadfc2e6": ["model.ae_project.stg_sources__conversions"], "test.ae_project.unique_channel_seed_channel_name.3e8802fa41": ["seed.ae_project.channel_seed"], "test.ae_project.not_null_channel_seed_channel_name.0551e3fda5": ["seed.ae_project.channel_seed"], "model.ae_project.tier1_raw__user_session": ["model.ae_project.stg_sources__sessions", "model.ae_project.tier1_raw__channel", "model.ae_project.tier1_raw__user"], "test.ae_project.unique_tier1_raw__user_session_user_session_gid.943b1f6dc2": ["model.ae_project.tier1_raw__user_session"], "test.ae_project.not_null_tier1_raw__user_session_user_session_gid.dbd4785125": ["model.ae_project.tier1_raw__user_session"], "test.ae_project.not_null_tier1_raw__user_session_user_gid.449b81636c": ["model.ae_project.tier1_raw__user_session"], "test.ae_project.relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_.1b59a59b86": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_session"], "test.ae_project.not_null_tier1_raw__user_session_user_session_start_timestamp.cdb7a1067c": ["model.ae_project.tier1_raw__user_session"], "test.ae_project.not_null_tier1_raw__user_session_user_session_channel_gid.3cc071dd6f": ["model.ae_project.tier1_raw__user_session"], "test.ae_project.relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_.7f1ba82847": ["model.ae_project.tier1_raw__user_session"], "test.ae_project.unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_.845aa6f3f3": ["model.ae_project.tier1_raw__user_session"], "source.ae_project.sources.sessions": [], "source.ae_project.sources.conversions": []}, "child_map": {"model.ae_project.tier3_consumption__user": ["test.ae_project.accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False.9109775d10", "test.ae_project.not_null_tier3_consumption__user_user_conversion_indicator.b1ed0e4066", "test.ae_project.not_null_tier3_consumption__user_user_id.1e70746daf", "test.ae_project.unique_tier3_consumption__user__user_id_user_conversion_indicator_.72b8da2232"], "model.ae_project.tier3_consumption__user_conversion": ["test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.9c0f9dbdc1", "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False.1e77c378d5", "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False.91be351bfb", "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_channel_name.45eb9f2303", "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_indicator.9cfb6bf655", "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_timestamp.e67f2f2d0c", "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator.860cf0dcc9", "test.ae_project.not_null_tier3_consumption__user_conversion_user_id.707d65f0dd", "test.ae_project.unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_.564363f97f"], "model.ae_project.tier2_curated__user": ["model.ae_project.tier3_consumption__user", "test.ae_project.accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False.9094d41297", "test.ae_project.not_null_tier2_curated__user_user_conversion_indicator.c2c47d8d21", "test.ae_project.not_null_tier2_curated__user_user_id.1a6cc8ec63", "test.ae_project.unique_tier2_curated__user__user_id_user_conversion_indicator_.e2b6afca5f"], "model.ae_project.tier2_curated__user_conversion": ["model.ae_project.tier3_consumption__user_conversion", "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.fe4e47b1ee", "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False.6cd53f27ba", "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False.50209a829c", "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_channel_name.6dc8378df0", "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_indicator.65d12ab355", "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_timestamp.e4fc81b9db", "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator.128a877f18", "test.ae_project.not_null_tier2_curated__user_conversion_user_id.ec7b75f850", "test.ae_project.unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_.766910495e"], "model.ae_project.tier1_raw__user_conversion_without_live_session": ["model.ae_project.tier2_curated__user_conversion", "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid.b55d9c9ab9", "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_gid.58a9a2bbce", "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.bd493a33cd", "test.ae_project.unique_tier1_raw__user_conversion_without_live_session_user_gid.81ecc40b0f"], "model.ae_project.tier1_raw__user_conversion_organic_live_session": ["model.ae_project.tier1_raw__user_conversion_without_live_session", "model.ae_project.tier2_curated__user_conversion", "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_gid.a3244e8642", "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid.a924e9a968", "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.a5c96ea83c", "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.8c36a1b800", "test.ae_project.unique_tier1_raw__user_conversion_organic_live_session_user_gid.1634aab819"], "model.ae_project.tier1_raw__user_conversion_paid_live_session": ["model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_without_live_session", "model.ae_project.tier2_curated__user_conversion", "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_gid.d7d04b67a7", "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid.bfea4a89a2", "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.b8ce42ba6a", "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.3be753c470", "test.ae_project.unique_tier1_raw__user_conversion_paid_live_session_user_gid.d6fe3415dd"], "model.ae_project.tier1_raw__user_conversion": ["model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_conversion_without_live_session", "model.ae_project.tier2_curated__user_conversion", "test.ae_project.not_null_tier1_raw__user_conversion_user_conversion_timestamp.3e7f9cc89e", "test.ae_project.not_null_tier1_raw__user_conversion_user_gid.6da6ddc3b8", "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.a5c96ea83c", "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.b8ce42ba6a", "test.ae_project.relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_.c1754ec569", "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.bd493a33cd", "test.ae_project.unique_tier1_raw__user_conversion_user_gid.a3f8810911"], "model.ae_project.tier1_raw__user": ["model.ae_project.tier1_raw__user_conversion", "model.ae_project.tier1_raw__user_session", "model.ae_project.tier2_curated__user", "model.ae_project.tier2_curated__user_conversion", "test.ae_project.accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False.b395d5765f", "test.ae_project.not_null_tier1_raw__user_user_conversion_indicator.0bdfebbec3", "test.ae_project.not_null_tier1_raw__user_user_gid.35f9954c17", "test.ae_project.not_null_tier1_raw__user_user_id.d930db0ef0", "test.ae_project.relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_.c1754ec569", "test.ae_project.relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_.1b59a59b86", "test.ae_project.unique_tier1_raw__user__user_id_user_conversion_indicator_.4150292f96", "test.ae_project.unique_tier1_raw__user_user_gid.fb11ca5714"], "model.ae_project.stg_sources__sessions": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_session", "test.ae_project.not_null_stg_sources__sessions_is_paid.cd2dc533ab", "test.ae_project.not_null_stg_sources__sessions_medium.4692625f3f", "test.ae_project.not_null_stg_sources__sessions_time_started.8e3d128f69", "test.ae_project.not_null_stg_sources__sessions_user_id.83b167125e", "test.ae_project.unique_stg_sources__sessions__user_id_time_started_.121d94c185"], "model.ae_project.tier1_raw__channel": ["model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_conversion_without_live_session", "model.ae_project.tier1_raw__user_session", "model.ae_project.tier2_curated__user_conversion", "test.ae_project.not_null_tier1_raw__channel_channel_gid.c57ac23c8c", "test.ae_project.not_null_tier1_raw__channel_channel_name.adce960d3a", "test.ae_project.unique_tier1_raw__channel_channel_gid.4a24a5e80b", "test.ae_project.unique_tier1_raw__channel_channel_name.32af038f4d"], "model.ae_project.stg_sources__conversions": ["model.ae_project.tier1_raw__user", "model.ae_project.tier1_raw__user_conversion", "test.ae_project.not_null_stg_sources__conversions_registration_time.3ecadfc2e6", "test.ae_project.not_null_stg_sources__conversions_user_id.25e291f337", "test.ae_project.unique_stg_sources__conversions_user_id.c32955bc24"], "seed.ae_project.channel_seed": ["model.ae_project.tier1_raw__channel", "test.ae_project.not_null_channel_seed_channel_name.0551e3fda5", "test.ae_project.unique_channel_seed_channel_name.3e8802fa41"], "test.ae_project.not_null_tier3_consumption__user_user_id.1e70746daf": [], "test.ae_project.not_null_tier3_consumption__user_user_conversion_indicator.b1ed0e4066": [], "test.ae_project.accepted_values_tier3_consumption__user_user_conversion_indicator__False__True__False.9109775d10": [], "test.ae_project.unique_tier3_consumption__user__user_id_user_conversion_indicator_.72b8da2232": [], "test.ae_project.not_null_tier3_consumption__user_conversion_user_id.707d65f0dd": [], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_indicator.9cfb6bf655": [], "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_indicator__False__True__False.1e77c378d5": [], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_channel_name.45eb9f2303": [], "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.9c0f9dbdc1": [], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_timestamp.e67f2f2d0c": [], "test.ae_project.not_null_tier3_consumption__user_conversion_user_conversion_via_session_indicator.860cf0dcc9": [], "test.ae_project.accepted_values_tier3_consumption__user_conversion_user_conversion_via_session_indicator__False__True__False.91be351bfb": [], "test.ae_project.unique_tier3_consumption__user_conversion__user_id_user_conversion_indicator_.564363f97f": [], "test.ae_project.not_null_tier2_curated__user_user_id.1a6cc8ec63": [], "test.ae_project.not_null_tier2_curated__user_user_conversion_indicator.c2c47d8d21": [], "test.ae_project.accepted_values_tier2_curated__user_user_conversion_indicator__False__True__False.9094d41297": [], "test.ae_project.unique_tier2_curated__user__user_id_user_conversion_indicator_.e2b6afca5f": [], "test.ae_project.not_null_tier2_curated__user_conversion_user_id.ec7b75f850": [], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_indicator.65d12ab355": [], "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_indicator__False__True__False.6cd53f27ba": [], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_channel_name.6dc8378df0": [], "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_channel_name__paid_click__paid_impression__organic_click__direct__other.fe4e47b1ee": [], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_timestamp.e4fc81b9db": [], "test.ae_project.not_null_tier2_curated__user_conversion_user_conversion_via_session_indicator.128a877f18": [], "test.ae_project.accepted_values_tier2_curated__user_conversion_user_conversion_via_session_indicator__False__True__False.50209a829c": [], "test.ae_project.unique_tier2_curated__user_conversion__user_id_user_conversion_indicator_.766910495e": [], "test.ae_project.unique_tier1_raw__user_user_gid.fb11ca5714": [], "test.ae_project.not_null_tier1_raw__user_user_gid.35f9954c17": [], "test.ae_project.not_null_tier1_raw__user_user_id.d930db0ef0": [], "test.ae_project.not_null_tier1_raw__user_user_conversion_indicator.0bdfebbec3": [], "test.ae_project.accepted_values_tier1_raw__user_user_conversion_indicator__False__True__False.b395d5765f": [], "test.ae_project.unique_tier1_raw__user__user_id_user_conversion_indicator_.4150292f96": [], "test.ae_project.unique_tier1_raw__user_conversion_user_gid.a3f8810911": [], "test.ae_project.not_null_tier1_raw__user_conversion_user_gid.6da6ddc3b8": [], "test.ae_project.relationships_tier1_raw__user_conversion_user_gid__user_gid__ref_tier1_raw__user_.c1754ec569": [], "test.ae_project.not_null_tier1_raw__user_conversion_user_conversion_timestamp.3e7f9cc89e": [], "test.ae_project.unique_tier1_raw__user_conversion_organic_live_session_user_gid.1634aab819": [], "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_gid.a3244e8642": [], "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.a5c96ea83c": [], "test.ae_project.not_null_tier1_raw__user_conversion_organic_live_session_user_session_gid.a924e9a968": [], "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.8c36a1b800": [], "test.ae_project.unique_tier1_raw__user_conversion_without_live_session_user_gid.81ecc40b0f": [], "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_gid.58a9a2bbce": [], "test.ae_project.relationships_tier1_raw__user_conversion_without_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.bd493a33cd": [], "test.ae_project.not_null_tier1_raw__user_conversion_without_live_session_user_conversion_channel_gid.b55d9c9ab9": [], "test.ae_project.unique_tier1_raw__user_conversion_paid_live_session_user_gid.d6fe3415dd": [], "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_gid.d7d04b67a7": [], "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_gid__user_gid__ref_tier1_raw__user_conversion_.b8ce42ba6a": [], "test.ae_project.not_null_tier1_raw__user_conversion_paid_live_session_user_session_gid.bfea4a89a2": [], "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.3be753c470": [], "test.ae_project.unique_tier1_raw__channel_channel_gid.4a24a5e80b": [], "test.ae_project.not_null_tier1_raw__channel_channel_gid.c57ac23c8c": [], "test.ae_project.unique_tier1_raw__channel_channel_name.32af038f4d": [], "test.ae_project.not_null_tier1_raw__channel_channel_name.adce960d3a": [], "test.ae_project.not_null_stg_sources__sessions_user_id.83b167125e": [], "test.ae_project.not_null_stg_sources__sessions_time_started.8e3d128f69": [], "test.ae_project.not_null_stg_sources__sessions_is_paid.cd2dc533ab": [], "test.ae_project.not_null_stg_sources__sessions_medium.4692625f3f": [], "test.ae_project.unique_stg_sources__sessions__user_id_time_started_.121d94c185": [], "test.ae_project.unique_stg_sources__conversions_user_id.c32955bc24": [], "test.ae_project.not_null_stg_sources__conversions_user_id.25e291f337": [], "test.ae_project.not_null_stg_sources__conversions_registration_time.3ecadfc2e6": [], "test.ae_project.unique_channel_seed_channel_name.3e8802fa41": [], "test.ae_project.not_null_channel_seed_channel_name.0551e3fda5": [], "model.ae_project.tier1_raw__user_session": ["model.ae_project.tier1_raw__user_conversion_organic_live_session", "model.ae_project.tier1_raw__user_conversion_paid_live_session", "model.ae_project.tier1_raw__user_conversion_without_live_session", "model.ae_project.tier2_curated__user_conversion", "test.ae_project.not_null_tier1_raw__user_session_user_gid.449b81636c", "test.ae_project.not_null_tier1_raw__user_session_user_session_channel_gid.3cc071dd6f", "test.ae_project.not_null_tier1_raw__user_session_user_session_gid.dbd4785125", "test.ae_project.not_null_tier1_raw__user_session_user_session_start_timestamp.cdb7a1067c", "test.ae_project.relationships_tier1_raw__user_conversion_organic_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.8c36a1b800", "test.ae_project.relationships_tier1_raw__user_conversion_paid_live_session_user_session_gid__user_session_gid__ref_tier1_raw__user_session_.3be753c470", "test.ae_project.relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_.1b59a59b86", "test.ae_project.relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_.7f1ba82847", "test.ae_project.unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_.845aa6f3f3", "test.ae_project.unique_tier1_raw__user_session_user_session_gid.943b1f6dc2"], "test.ae_project.unique_tier1_raw__user_session_user_session_gid.943b1f6dc2": [], "test.ae_project.not_null_tier1_raw__user_session_user_session_gid.dbd4785125": [], "test.ae_project.not_null_tier1_raw__user_session_user_gid.449b81636c": [], "test.ae_project.relationships_tier1_raw__user_session_user_gid__user_gid__ref_tier1_raw__user_.1b59a59b86": [], "test.ae_project.not_null_tier1_raw__user_session_user_session_start_timestamp.cdb7a1067c": [], "test.ae_project.not_null_tier1_raw__user_session_user_session_channel_gid.3cc071dd6f": [], "test.ae_project.relationships_tier1_raw__user_session_user_session_channel_gid__channel_gid__ref_channel_.7f1ba82847": [], "test.ae_project.unique_tier1_raw__user_session__TO_BASE64_user_gid_cast_user_session_start_timestamp_as_string_.845aa6f3f3": [], "source.ae_project.sources.sessions": ["model.ae_project.stg_sources__sessions"], "source.ae_project.sources.conversions": ["model.ae_project.stg_sources__conversions"]}, "group_map": {}, "semantic_models": {}}